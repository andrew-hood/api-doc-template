{
  "openapi": "3.0.1",
  "info": {
    "title": "GO1 API",
    "description": "\nGO1 API has been built to make it easy to integrate GO1 with external systems.\n\nAll endpoints are only accessible via https and are located at `api.go1.com`.\n\nGO1 supports users belonging to one or more portals. This API only supports accessing data from one portal at a time. If you need to retrieve data from multiple portals you will need to authenticate with each portal and separately request the data.\n\n# Authentication\nGO1 uses the standard OAuth 2.0 protocol to provide authentication and authorization. Check out our [Authentication & Authorization Guide](https://www.go1.com/en-au/developers/customers/concepts/authentication-and-authorization) if you want to learn more about OAuth 2.0.\nPlease note that the OAuth 2.0 servers are located at **https://auth.go1.com** instead. Check out the [Auth API Reference](https://www.go1.com/developers/api/reference/auth).\n\n<SecurityDefinitions />\n",
    "termsOfService": "https://www.go1.com/terms/user-terms",
    "version": "v2"
  },
  "servers": [
    {
      "url": "https://api.go1.com"
    }
  ],
  "tags": [
    {
      "name": "Account",
      "description": "Gets details about the portal you are requesting for. E.g. Number of users in plan, URL, active user count."
    },
    {
      "name": "Award",
      "description": "Allows creation of awards in a portal."
    },
    {
      "name": "Collections",
      "description": "Allows management of the default collection. The default collection is a subset of portal content which can be curated by Admins as desired. There is only one such collection per portal currently."
    },
    {
      "name": "Configuration"
    },
    {
      "name": "Enrollments",
      "description": "Allows operators to fetch or create enrolments. Note that you may fetch enrolments for a portal, or you can pass a userid to fetch enrolments for a particular user(s)."
    },
    {
      "name": "Learning Activity",
      "description": "Allows operators to fetch their own SCORM request payloads by `enrollment-id`."
    },
    {
      "name": "Learning Content",
      "description": "Allows the operator to retrieve content from our Explore service, which essentially contains all the content for the portal. This includes Premium, customer-created content as well as Marketplace content. Using the parameter subscribe=true filters out “Marketplace”, which is recommended."
    },
    {
      "name": "Users",
      "description": "Allows operators to retrieve or manage user accounts and associated details."
    },
    {
      "name": "User Groups",
      "description": "Allows management of User Group."
    },
    {
      "name": "Webhooks",
      "description": "Webhooks are also available from the GO1 product to enable your application to catch and receive updates regarding enrolments, content and users.\n\n\n## user_create event\n\nThe `user_create` event is triggered whenever a new user is created within a Go1 portal.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookUserCreatePayload\" />\n\n## user_update event\n\nThe `user_update` event is triggered whenever an user is updated in Go1.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookUserUpdatePayload\" />\n\n## user_delete event\n\nThe `user_delete` event is triggered whenever an user is deleted in Go1.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookUserDeletePayload\" />\n\n## enrolment_create event\n\nThe `enrolment_create` event is triggered whenever a user is enrolled in a learning object. A user can be enrolled in a learning object themselves by simply starting a new course or learning resource. Or, they could be enrolled by another actor, for example by an Admin or Manager user in the Go1 platform.\n\nThe enrolment actions mentioned above will trigger a payload with the details of the user and the learning they are enrolled into, with the learning status as `in-progress`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookEnrolmentCreatePayload\" />\n\n## enrolment_update event\n\nThe `enrolment_update` event will trigger in two different circumstances as described below:\n\n- (1) Whenever a user completes a learning object. In other words, the event will fire when a user's enrolment status in a learning object changes from `in-progress` to `complete`.\n- (2) Whenever a user makes notable progress within a learning object, or in other words, when a users enrolment details change but the enrolment is still in an `in-progress` state.\n\nThe second scenario does not occur for all learning object types, there is only certain content that will trigger the enrolment_update payload with an `in-progress` status. The most common scenario is where the learning object is a long-form course, with multiple child items such as assessments that the user completes at different stages.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookEnrolmentUpdatePayload\" />\n\n## enrolment_delete event\n\nThe `enrolment_delete` event is triggered whenever an enrolment is deleted. Enrolments can only be deleted by an administrator user within a Go1 portal.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookEnrolmentDeletePayload\" />\n\n## lo_create event\n\nThe `lo_create` event is triggered whenever a learning object is created in Go1.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookLOCreatePayload\" />\n\n## lo_update event\n\nThe `lo_update` event is triggered whenever a learning object is updated in Go1.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookLOUpdatePayload\" />\n\n## lo_delete event\n\nThe `lo_delete` event is triggered whenever a learning object is deleted in Go1.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookLODeletePayload\" />\n\n## content_decommission event\n\nThe `content_decommission` event is triggered when the Go1 Content Team manually flags content from the Go1 library for decommissioning. This often occurs when our content providers choose to retire or replace old content.\n\nWhen content is flagged for decommissioning, a payload will be sent containing the ID of the content that has been flagged for decommissioning (see example payload below).\n\nAny content that is flagged for decommissioning will be archived (removed) from the Go1 Library after a minimum of 60 days.\n\nNote, during the 60 days, access to decommissioned content will be removed immediately for any new users who try to access the content. Users who are already enrolled in the content will still be able to access and complete the learning within the 60 day period - after which the content will be archived.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookContentDecommissionPayload\" />\n\n## content_update event\n\nThe `content_update` event is triggered whenever content that you can see within your Go1 portal changes. For example, the following actions will trigger this payload:\n\n- new content is added by Go1\n- content is removed by Go1\n- content has been changed/edited by Go1\n\nWhenever one of the above triggers occur, the webhook will fire and contain the `lo-id` of the updated content only. The receiver must work out what actually happened to each learning object (LO).\n\nTo do this, you could query the LO via a GET request to [Get learning object details](#operation/getLearningObjectDetails) and then determine your action based on the response from the API. Your actions could be one of the following:\n\n- if the LO is there, and previously did not exist= add the content\n- if the LO returns a 404 = deleted the content\n- if the LO is there, and previous existed = update the content\n\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookContentUpdatePayload\" />\n"
    },
    {
      "name": "Onboarding",
      "description": "Allows the creation of a new customer portal and provision some admin user accounts at the same time, as desired."
    },
    {
      "name": "Data Mapping",
      "description": "Allows operators to retrieve or manage data mapping and associated details."
    }
  ],
  "paths": {
    "/v2/account": {
      "get": {
        "tags": ["Account"],
        "summary": "Get portal details",
        "description": "Detailed information about the portal the token is connected to. Including information about features activated and the billing plan.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["account.read"]
          }
        ]
      }
    },
    "/v2/award": {
      "post": {
        "tags": ["Award"],
        "summary": "Add awards to a portal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwardCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The award was created and added to the portal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorVerbose"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/award/{awardId}": {
      "get": {
        "tags": ["Award"],
        "summary": "Loads an award from the portal",
        "parameters": [
          {
            "name": "awardId",
            "in": "path",
            "description": "the id of the award to load",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The award object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardLoadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorVerbose"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Award not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/collections/{collection-id}/items/add": {
      "post": {
        "tags": ["Collections"],
        "summary": "Add items to a collection",
        "parameters": [
          {
            "name": "collection-id",
            "in": "path",
            "description": "The collection identifier number, or the string `default`.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCollectionItems"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Items added to collection",
            "content": {}
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "406": {
            "description": "The number of items in the collection exceeds the limit.",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/collections/{collection-id}/items/remove": {
      "post": {
        "tags": ["Collections"],
        "summary": "Remove items from a collection",
        "parameters": [
          {
            "name": "collection-id",
            "in": "path",
            "description": "The collection identifier number, or the string `default`.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCollectionItems"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Items removed from collection",
            "content": {}
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/configuration": {
      "get": {
        "tags": ["Configuration"],
        "summary": "Get portal configuration",
        "description": "Gets the key value configuration pairs for a portal.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalConfiguration"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["portal.read"]
          }
        ]
      },
      "put": {
        "tags": ["Configuration"],
        "summary": "Modify portal configuration",
        "description": "Creates or updates the key value configuration pairs as sent in the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortalConfiguration"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalConfiguration"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["portal.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/learning-activity": {
      "get": {
        "tags": ["Learning Activity"],
        "summary": "Fetch a SCORM request payload (Beta)",
        "description": "`BETA` \n\nFetch the raw SCORM request payload associated with any of your enrollments.\n\nThe payload includes everything supplied in the original SCORM request.",
        "parameters": [
          {
            "name": "enrollment-id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to start paging from. Default value for offset is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. Maximum value is 50, default value is 50. Each endpoint has a default limit where applicable, so passing in a value is recommended.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Learning activities result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningActivityResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["enrollment.read"]
          }
        ]
      }
    },
    "/v2/competency/related-roles": {
      "get": {
        "tags": ["Learning Content"],
        "summary": "Fetch related roles (Experimental)",
        "description": "Note: This endpoint is still in an experimental phase, please contact support first if you want to use it! Returns roles in the GO1 system which are similar to the one provided.",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Related roles result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ]
      }
    },
    "/v2/competency/roles": {
      "get": {
        "tags": ["Learning Content"],
        "summary": "Endpoint to search for (Experimental)",
        "description": "Note: This endpoint is still in an experimental phase, please contact support first if you want to use it! Returns roles based on role parameter for autocomplete or based on skill parameter.",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skill",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ]
      }
    },
    "/v2/competency/skills": {
      "get": {
        "tags": ["Learning Content"],
        "summary": "Endpoint to search for skills (Experimental)",
        "description": "Note: This endpoint is still in an experimental phase, please contact support first if you want to use it! Returns roles based on skill parameter for autocomplete or based on role parameter.",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skill",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Skills result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillsResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ]
      }
    },
    "/v2/content/links": {
      "post": {
        "tags": ["Learning Content"],
        "summary": "Create a new link",
        "description": "Creates a new standalone `link` type learning item.",
        "requestBody": {
          "description": "Link to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The new link created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["lo.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/content/manual": {
      "post": {
        "tags": ["Learning Content"],
        "summary": "Create a new manual learning item",
        "description": "Creates a new standalone `manual` type learning item.",
        "requestBody": {
          "description": "Manual to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The new manual created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manual"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        },
        "security": [
          {
            "OAuth2": ["lo.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/enrollments": {
      "get": {
        "tags": ["Enrollments"],
        "summary": "List enrollments",
        "description": "Gets a list of enrollments in the portal.\n\nNote: If the `user_id` parameter is not present, the authenticated user must be a portal administrator.\n",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to start paging from. Offset + limit must not exceed 10,000.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. Maximum value is 50. Each endpoint has a default limit where applicable, so passing in\na value is recommended.\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Request additional data in the response.\n\nFormat: `include=value[,value...]`\n\n#### Example\n* `include=lo` will return additional data about the learning object the user (was) enrolled in\n",
            "schema": {
              "type": "string",
              "enum": ["lo"]
            }
          },
          {
            "name": "lo_ids",
            "in": "query",
            "description": "Filter by learning object ID(s).\n\nFormat: `lo_ids=value[,value...]`\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Fiter by one or multiple enrollment statuses.\n\nFormat: `status=value[,value...]`\n\n#### Examples\n* `status=completed` will only return completed enrollments\n* `status=not-started,in-progress` will only return enrollments that either have not been started or are in progress\n",
            "schema": {
              "type": "string",
              "enum": ["completed", "in-progress", "not-started", "assigned"]
            }
          },
          {
            "name": "updated",
            "in": "query",
            "description": "Filter by changed timestamp so that only enrolments that are greater than or equal to are retrieved.\n\nExample: `1531785600`\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID.\nIf this parameter is not present, the authenticated user must be a portal administrator.\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "exclude_child_enrollments",
            "in": "query",
            "description": "Filter by excluding child enrollments.\n\nAvailable values:\n* `true`: Only return top level enrollments.\n* `false` or omitted: Return enrollments without filtering out child enrollments.\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "utm_source",
            "in": "query",
            "description": "Filter by the source of where the enrolment was created.\n\nExample: `msteams`\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "utm_content",
            "in": "query",
            "description": "Filter by the source content related to the creation of the enrollment.\n\nExample: `External_ID`\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "utm_medium",
            "in": "query",
            "description": "Filter by the medium related to the creation of the enrollment.\n\nExample: `desktop`\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "utm_campaign",
            "in": "query",
            "description": "Filter by the campaign id related to the creation of the enrollment.\n\nExample: `SF-xxxxxxxx`\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scroll",
            "in": "query",
            "description": "Enables a 5-minute window to iterate over the result set. Use this instead of `offset` when retrieving large data sets.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "A scroll ID returned by a previous request.\nTo use this, first send a request with `scroll=true`, and save the value of the `_scroll_id` property from the response.\nTo iterate, send `scroll=true` and `scrollId` with this value for each subsequent request.\nExtends the window by another minute.\n\nWill return an empty result set if the window has expired or a wrong scroll ID is passed in.\n\nAggregated data (facets) will not be included.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["enrollment.read"]
          }
        ]
      },
      "post": {
        "tags": ["Enrollments"],
        "summary": "Create a new enrollment",
        "description": "Creates a new enrollment given the user and learning object id.",
        "operationId": "addEnrollment",
        "requestBody": {
          "description": "Enrollment to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A new enrollment has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentCreateResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid enrollment supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Learning object not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["enrollment.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/enrollment-aggregates": {
      "get": {
        "tags": ["Enrollments"],
        "summary": "Get enrollment count of learning objects",
        "description": "Get learning objects which have enrollment numbers equal or larger than the provided parameter. Or get enrollment count for the learning object ids provided. At least one of the two parameter needs to be supplied. This endpoint is only available for users with administrator permissions.",
        "parameters": [
          {
            "name": "min_enrollment_count",
            "in": "query",
            "description": "The minimum enrollment count a learning object needs to have",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "lo_ids[]",
            "in": "query",
            "description": "Learning object IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The enrollment count object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentCountResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid min_enrollment_count or lo_ids parameter supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["enrollment.read"]
          }
        ]
      }
    },
    "/v2/enrollments/award": {
      "post": {
        "tags": ["Enrollments"],
        "summary": "Create a new award enrollment",
        "description": "Creates a new enrollment given the user and learning object id.",
        "requestBody": {
          "description": "Enrollment to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwardEnrollmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A new enrollment has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEnrollmentCreateResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid enrollment supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Learning object not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["enrollment.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/enrollments/{enrollment-id}": {
      "get": {
        "tags": ["Enrollments"],
        "summary": "Get enrollment details",
        "description": "Gets the enrollment for a given enrollment id. Note, only enrollment id is supported, the award and plan-assigned enrollment types are not supported.",
        "parameters": [
          {
            "name": "enrollment-id",
            "in": "path",
            "description": "The enrollment id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "includeLTIRegistrations",
            "in": "query",
            "description": "Turn on to get LTI results information (Experimental)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The enrollment object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Enrollment is not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["enrollment.read"]
          }
        ]
      },
      "patch": {
        "tags": ["Enrollments"],
        "summary": "Update an enrollment",
        "description": "Update an enrollment for a given enrollment id.",
        "parameters": [
          {
            "name": "enrollment-id",
            "in": "path",
            "description": "The enrollment id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Upate enrollment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwardEnrollmentAttributes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The enrollment is updated",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Enrollment is not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["enrollment.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/enrollments/{enrollment-id}/goal": {
      "post": {
        "tags": ["Enrollments"],
        "summary": "Link an existing enrolment to a goal",
        "description": "Update an enrollment for a given enrollment id.",
        "parameters": [
          {
            "name": "enrollment-id",
            "in": "path",
            "description": "The enrollment id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Link to a goal",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrollmentGoal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The enrollment is linked to a goal",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Enrollment is not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["enrollment.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/provider/enrollments": {
      "post": {
        "operationId": "EnrolmentsController_postProviderEnrolment",
        "summary": "Create or update an enrolment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateEnrolmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Enrolment has been created or updated"
          },
          "208": {
            "description": "Occurs when out-of-sync messages are found."
          },
          "400": {
            "description": "Occurs when there's a validation error that is failing to create/update an enrolment"
          },
          "401": {
            "description": "Occurs when the request Failed to retrieve token from request header, Failed to decode token, or Failed to parse JWT"
          },
          "403": {
            "description": "Insufficient roles for this resource"
          },
          "404": {
            "description": "Occurs when the learning object or the user is not found"
          },
          "413": {
            "description": "Occurs when there are too many accounts associated with the user id"
          },
          "500": {
            "description": "Occurs when a subsequent API call of Go1 internal services has fallen over"
          }
        },
        "tags": ["Enrollments"],
        "security": [
          {
            "OAuth2": ["enrollment.write"]
          }
        ]
      }
    },
    "/v2/learning-objects": {
      "get": {
        "tags": ["Learning Content"],
        "summary": "List learning objects",
        "description": "Search for learning objects.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to start paging from. Offset + limit must not exceed 10,000.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. Maximum value is 50. Each endpoint has a default limit where applicable, so passing in\na value is recommended.\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "collection",
            "in": "query",
            "description": "Filter by collection.",
            "schema": {
              "type": "string",
              "enum": ["default"]
            }
          },
          {
            "name": "content_group[]",
            "in": "query",
            "description": "Filter by content group",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "duration[min]",
            "in": "query",
            "description": "Filter by minimum duration in minutes. Will return learning objects with the specified\nduration or longer. Support multiple ranges: duration[0][min]=0&duration[0][max]=15&duration[1][min]=60.\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "duration[max]",
            "in": "query",
            "description": "Filter by maximum duration in minutes. Will return learning objects with the specified duration or shorter. Support multiple ranges: duration[0][min]=0&duration[0][max]=15&duration[1][min]=60.\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "Filter learning objects based on their events.\n\nAvailable values:\n* `true`: Only return learning objects with events.\n* `false`: Only return learning objects without events.\n* `all`: Return learning objects both with and without events.\n",
            "schema": {
              "type": "string",
              "enum": ["true", "false", "all"]
            }
          },
          {
            "name": "eventStartDate",
            "in": "query",
            "description": "Event start date in Unix timestamp format. Use to filter for learning objects with events starting at a specific time and date.\n\nExample: `1531785600`\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "eventEndDate",
            "in": "query",
            "description": "Event end date in Unix timestamp format. Use to filter for learning objects with events ending at a specific time and date.\n\nExample: `1531872000`\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "facets",
            "in": "query",
            "description": "Search facets to be returned.\n\nFormat: `facets=facet[,facet...]`\n\n#### Examples\n* `facets=language` -- the response will include a `facets` object containing a `language` object with information about the possible languages to filter on.\n* `facets=instance,tag` -- the response will include a `facets` object containing an `instance` object with information about the possible instances to filter on, and a `tag` object with information about the possible tags to filter on.\n",
            "schema": {
              "type": "string",
              "enum": ["instance", "language", "tag", "content_group", "topics"]
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Search a keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language[]",
            "in": "query",
            "description": "Filter by language (and optionally locale).\n\nAccepts two-letter [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for languages in lowercase, and optionally two-letter [ISO 3166-1 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for countries in lowercase, separated by a hyphen.\n\n#### Examples\n* `language[]=hu` -- Only return learning objects whose language is Hungarian.\n* `language[]=en-gb` -- Only return learning objects whose language is English (United Kingdom).\n* `language[]=es&language[]=sv` -- Only return learning objects whose language is Spanish or Swedish.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "location[country][]",
            "in": "query",
            "description": "Only request learning objects that have one or more events that take place in a specific country.\n\nAccepts two-letter [ISO 3166-1 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for countries in uppercase.\n\nExample: `AU`\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "location[locality][]",
            "in": "query",
            "description": "Only request learning objects that have one or more events that take place in a specific town.\n\nExample: `Brisbane`\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "location[thoroughfare][]",
            "in": "query",
            "description": "Only request learning objects that have one or more events that take place at a specific address.\n\nExample: `64 Adelaide Street`\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "price[min]",
            "in": "query",
            "description": "Filter by minimum price. Will return learning objects with the specified\nprice or higher.\n\nThe value can be an integer or a floating-point number.\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "price[max]",
            "in": "query",
            "description": "Filter by maximum price. Will return learning objects with the specified\nprice or lower.\n\nThe value can be an integer or a floating-point number.\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "providers",
            "in": "query",
            "description": "Filter by provider ID(s).\n\nTo retrieve provider IDs, first use a `?facets[]=instance&limit=0` query, and use the `$.facets.instance.buckets[*].key` values from the response.\n\n#### Examples\n* `providers=150` will return learning objects provided by provider `#150`\n* `providers=150,2000` will return learning objects provided by either provider `#150` or provider `#2000`\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort learning objects by one or more properties.\n\nFormat: `sort=key[:direction][,key[:direction]...]`\n\nAvailable sorting options:\n* `created`\n* `popularity`\n* `price`\n* `relevance`\n* `title`\n\n#### Examples\n* `sort=popularity` will sort by popularity, showing least popular learning objects first (since no direction is specified)\n* `sort=created:desc` will sort by creation date, showing most recent learning objects first\n* `sort=price:desc,title` will sort learning objects first by price in descending order, then by title in ascending order (since no direction is specified)\n",
            "schema": {
              "type": "string",
              "default": "title",
              "enum": ["created", "popularity", "price", "relevance", "title"]
            }
          },
          {
            "name": "subscribed",
            "in": "query",
            "description": "Filter by subscribed content.\n\nAvailable values:\n* `true`: Only return learning objects subscribed to.\n* `false`: Only return learning objects not subscribed to.\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subscribed[group][]",
            "in": "query",
            "description": "Filter by subscribed content groups. Will return learning objects are in these groups.\n\nThe value must be an integer number.\n\n#### Examples\n  * `subscribed[group][]=12345` will only return learning objects that are in portal's subscribe collection AND in content group #12345\n  * `subscribed[group][]=12345&subscribed[group][]=56789` will only return learning objects that are in portal's subscribe collection AND in content groups #12345, #56789 or both\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "tags[]",
            "in": "query",
            "description": "Filter by content tag(s).\n\n#### Usage\nUse the textual representation of the tags (not tag IDs).\n\n#### Examples\n* `tags[]=Agile` will only return learning objects that are tagged with `Agile`\n* `tags[]=Agile&tags[]=Business Skills` will return learning objects that are tagged with `Agile`, `Business Skills`, or both\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Fiter by one or multiple learning object types.\n\nFormat: `type=value[,value...]`\n\n#### Examples\n* `type=course` will only return courses\n* `type=learning_resource` will only return standalone learning resources, which are not part of any course or module (but not courses)\n* `type=course,video` will only return courses and videos\n",
            "schema": {
              "type": "string",
              "enum": [
                "assignment",
                "award",
                "course",
                "document",
                "event",
                "integration",
                "interactive",
                "lti",
                "question",
                "quiz",
                "text",
                "video"
              ]
            }
          },
          {
            "name": "topics[]",
            "in": "query",
            "description": "Filter by one or more topics",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "locale[]",
            "in": "query",
            "description": "#### DEPRECATED\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider[]",
            "in": "query",
            "description": "#### DEPRECATED\nSee `providers`.\n\n#### Examples\n* `provider[]=150` will return learning objects provided by provider `#150`\n* `provider[]=150&provider[]=2000` will return learning objects provided by either provider `#150` or provider `#2000`\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "Filter by Learning Object ID\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "entry_level[]",
            "in": "query",
            "description": "Filter by entry level(s) such as Advanced, Beginner, Intermediate or Suitable for everyone.\n\n#### Examples\n* `entry_level[]=Advanced` will only return learning objects that have entry level of `Advanced`\n* `entry_level[]=Advanced&entry_level[]=Suitable for everyone` will return learning objects that have entry level of `Advanced`, `Suitable for everyone`, or both\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updatedAfter",
            "in": "query",
            "description": "Return only items that have been updated after the given timestamp",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "Include custom LO fields.\n\nAvailable values:\n* `true`: Will return custom LO fields (custom_fields).\n* `false`: Will not return custom LO fields (custom_fields).\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "custom_attributes[attribute_name][]",
            "in": "query",
            "description": "Search for learning objects based on custom attribute values.\nAttribute names can be specified multiple times.\nAn OR search is performed for attributes of the same name and an AND search is performed\nfor attributes with a different name.\n",
            "example": "custom_attributes[custom_lo_name1][]=custom_lo_value1& custom_attributes[custom_lo_name2][]=custom_lo_value2",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "scroll",
            "in": "query",
            "description": "Enables a 1-minute window to iterate over the result set. Use this instead of `offset` when retrieving large data sets.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "A scroll ID returned by a previous request.\nTo use this, first send a request with `scroll=true`, and save the value of the `_scroll_id` property from the response.\nTo iterate, send `scroll=true` and `scrollId` with this value for each subsequent request.\nExtends the window by another minute.\n\nWill return an empty result set if the window has expired or a wrong scroll ID is passed in.\n\nAggregated data (facets) will not be included.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_decommissioned",
            "in": "query",
            "description": "Include decommissioned content.\n\nAvailable values:\n* `true`: decommissioned content only.\n* `false`: Exclude decommissioned content.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of learning objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningObjectsSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorVerbose"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ]
      },
      "post": {
        "operationId": "LearningObjectsController_postLearningObject",
        "summary": "Create a learning object",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateLinkLearningObject"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A new learning object has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLearningObjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Occurs when there's a validation error that is failing to create a learning object"
          },
          "401": {
            "description": "Occurs when the request \"Failed to retrieve token from request header\", \"Failed to decode token\", or \"Failed to parse JWT\""
          },
          "403": {
            "description": "Insufficient user permission for this resource"
          },
          "500": {
            "description": "Occurs when a subsequent call to an internal service has failed"
          }
        },
        "tags": ["Learning Content"]
      }
    },
    "/v2/learning-objects/{lo-id}": {
      "get": {
        "operationId": "getLearningObjectDetails",
        "tags": ["Learning Content"],
        "summary": "Get learning object details",
        "description": "Detailed information about a learning object (LO).\nThe schema of the object returned depends on the LO type.\nCourses contain modules under `items`, and modules contain learning items under `items`.\nLearning items themselves have no `items`.\n",
        "parameters": [
          {
            "name": "lo-id",
            "in": "path",
            "description": "Learning object ID.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "Include custom LO fields.\n\nAvailable values:\n* `true`: Will return custom LO fields (custom_fields).\n* `false`: Will not return custom LO fields (custom_fields).\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningObjectResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Learning object not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ]
      }
    },
    "/v2/learning-objects/source/{source_id}": {
      "patch": {
        "operationId": "LearningObjectsController_patchLearningObject",
        "summary": "Patch a learning object by source_id",
        "parameters": [
          {
            "name": "source_id",
            "required": true,
            "in": "path",
            "description": "A unique identifier assigned to the learning content by the caller when the learning content first gets created.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PatchLinkLearningObject"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The provided learning object has been successfully patched with the contents of the payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchLearningObjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Occurs when there's a validation error to update an LO lo"
          },
          "401": {
            "description": "Occurs when the request \"Failed to retrieve token from request header\", \"Failed to decode token\", or \"Failed to parse JWT\""
          },
          "403": {
            "description": "Insufficient roles for this resource"
          },
          "500": {
            "description": "Occurs when a subsequent API call of Go1 internal services has fallen over"
          }
        },
        "tags": ["Learning Content"]
      },
      "get": {
        "operationId": "LearningObjectsController_getLearningObject",
        "tags": ["Learning Content"],
        "summary": "Get a learning object by source_id",
        "parameters": [
          {
            "name": "source_id",
            "required": true,
            "in": "path",
            "description": "A unique identifier assigned to the learning content by the caller when the learning content first gets created.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "It successully returns the learning object mapped to the provided source_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchLearningObjectResponse"
                }
              }
            }
          },
          "401": {
            "description": "Occurs when the request \"Failed to retrieve token from request header\", \"Failed to decode token\", or \"Failed to parse JWT\""
          },
          "403": {
            "description": "Insufficient roles for this resource"
          },
          "404": {
            "description": "Occurs when there's no LO found with the provided source_id"
          },
          "500": {
            "description": "Occurs when a subsequent API call of Go1 internal services has fallen over"
          }
        }
      }
    },
    "/v2/learning-objects/suggest/autocomplete": {
      "get": {
        "tags": ["Learning Content"],
        "summary": "Get autocomplete suggestion",
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "description": "Keyword to query suggestions",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Agile"
            }
          },
          {
            "name": "limit[related]",
            "in": "query",
            "description": "Limit related search term suggestion items",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 3
            }
          },
          {
            "name": "limit[taxonomy]",
            "in": "query",
            "description": "Limit taxonomy suggestion items",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 3
            }
          },
          {
            "name": "limit[term]",
            "in": "query",
            "description": "Limit search term suggestion items",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 3
            }
          },
          {
            "name": "limit[title]",
            "in": "query",
            "description": "Limit learning object suggestion items",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 3
            }
          },
          {
            "name": "limit[topic]",
            "in": "query",
            "description": "Limit topic suggestion items",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningObjectSuggestionResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/learning-objects/{lo-id}/custom-attributes": {
      "patch": {
        "tags": ["Learning Content"],
        "summary": "Update learning object custom attributes",
        "description": "If custom attributes for learning objects have been set up on the portal, this endpoint can be used to update the values of those custom attributes.\n",
        "parameters": [
          {
            "name": "lo-id",
            "in": "path",
            "description": "Learning object ID.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Attributes to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LearningObjectCustomAttributesUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningObjectCustomAttributesResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Learning object not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.write"]
          }
        ]
      }
    },
    "/v2/learning-objects/{lo-id}/preview": {
      "get": {
        "tags": ["Learning Content"],
        "summary": "Get preview URL for learning objects",
        "description": "Returns one or more URLs that can be embedded or directly used to preview a learning object.\n\nCan only be requested for learning objects whose `previewable` property equals `true`.\n",
        "parameters": [
          {
            "name": "lo-id",
            "in": "path",
            "description": "Learning object ID.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "redirect_url",
            "in": "query",
            "description": "After finishing the preview of a scrom file, the user will be redirected to this URL when it is provided",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Learning object preview URL options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewLinks"
                }
              }
            }
          },
          "400": {
            "description": "Learning object cannot be previewed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Learning object not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ]
      }
    },
    "/v2/learning-objects/{lo-id}/similar": {
      "get": {
        "tags": ["Learning Content"],
        "summary": "Get similar learning objects (Experimental)",
        "description": "Returns one or more learning objects which are similar to the LO provided. The schema of the object returned depends on the LO type.\n",
        "parameters": [
          {
            "name": "lo-id",
            "in": "path",
            "description": "Learning object ID.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "overrides",
            "in": "query",
            "description": "Elastic Search query params to override\nFormat: `overrides[must|should][]=attribute_name`\n#### Examples\n* `overrides[must][]=custom_fields.field_1` will only return LO's that match `custom_fields.field_1`.\n* `overrides[should][]=custom_fields.field_2` will return LO's that should match `custom_fields.field_2`.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Similar learning objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningObjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Learning object is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Learning object not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ]
      }
    },
    "/v2/learning-objects/{lo-id}/scorm": {
      "get": {
        "tags": ["Learning Content"],
        "summary": "Download learning object as a SCORM package",
        "description": "Download learning object as a SCORM package.",
        "parameters": [
          {
            "name": "lo-id",
            "in": "path",
            "description": "Learning object ID.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A SCORM package in a zip file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Learning object not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["lo.read"]
          }
        ]
      }
    },
    "/v2/onboard": {
      "post": {
        "tags": ["Onboarding"],
        "summary": "Creates new portals",
        "description": "Creates a new portal as well as a new user account if one doesn't exist. If it does exist, the existing users access token has to be used to make this request. This request can be made with tokens required using the grant type \"client_credentials\"",
        "requestBody": {
          "description": "User, portal and customer details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardPortalCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Portal and users created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputErrorVerbose"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "409": {
            "description": "User already exists. Please use the user's OAuth-Token to perform this request.",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["portal.write"]
          }
        ],
        "x-codegen-request-body-name": "Request body"
      }
    },
    "/v2/partners/content-group": {
      "post": {
        "tags": ["Partners"],
        "summary": "Add content group to child portals",
        "description": "Allow partners to add a content group to their child portal",
        "requestBody": {
          "description": "Content group to add",
          "content": {
            "application/json": {
              "schema": {
                "required": ["child_portal_id", "content_group_id"],
                "type": "object",
                "properties": {
                  "child_portal_id": {
                    "type": "integer",
                    "description": "Partner child portal ID."
                  },
                  "content_group_id": {
                    "type": "integer",
                    "description": "Content group ID."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Portal and content group linked"
          },
          "400": {
            "description": "Error with supplied parameters."
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["portal.write"]
          }
        ],
        "x-codegen-request-body-name": "Request body"
      },
      "delete": {
        "tags": ["Partners"],
        "summary": "Remove content group from child portals",
        "description": "Allow partners to remove a content group from their child portal",
        "requestBody": {
          "description": "Content group to remove",
          "content": {
            "application/json": {
              "schema": {
                "required": ["child_portal_id", "content_group_id"],
                "type": "object",
                "properties": {
                  "child_portal_id": {
                    "type": "integer",
                    "description": "Partner child portal ID."
                  },
                  "content_group_id": {
                    "type": "integer",
                    "description": "Content group ID."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Portal and content group un-linked"
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidInputError"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["portal.write"]
          }
        ],
        "x-codegen-request-body-name": "Request body"
      }
    },
    "/v2/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Authenticated user details",
        "description": "Information about the authenticated user",
        "responses": {
          "200": {
            "description": "Information about the authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.read"]
          }
        ]
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update authenticated user details",
        "description": "Update information about the authenticated user",
        "requestBody": {
          "description": "Fields that are to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSelfUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "User has suppled invalid params",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CurrentPasswordInvalid"
                    },
                    {
                      "$ref": "#/components/schemas/PasswordInvalid"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.write"]
          }
        ]
      }
    },
    "/v2/me/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Generate login link",
        "description": "Generate a single use login URL for the authenticated user.",
        "parameters": [
          {
            "name": "redirect_url",
            "in": "query",
            "description": "Redirect path after login. Relative to portal domain.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A redirect URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.login.me"]
          }
        ]
      }
    },
    "/v2/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List users",
        "description": "Retrieves a list of users filtered by the given search criteria",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to start paging from. Offset + limit must not exceed 10,000.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. Maximum value is 50. Each endpoint has a default limit where applicable, so passing in\na value is recommended.\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "E-mail",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles[]",
            "in": "query",
            "description": "Roles",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Administrator",
                  "Learner",
                  "Assessor",
                  "Manager",
                  "Content administrator"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.read"]
          }
        ]
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create new user",
        "description": "Will create a new user. An email will be sent to the user for them to login and set their password.",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized. Either the JWT does not have sufficient permissions or a password was provided with an existing email.",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/users/{user-id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user details",
        "description": "Get the user record",
        "parameters": [
          {
            "name": "user-id",
            "in": "path",
            "description": "User identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.read"]
          }
        ]
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update user record",
        "parameters": [
          {
            "name": "user-id",
            "in": "path",
            "description": "User identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/users/{user-id}/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Generate login link",
        "description": "Generate a single use login URL for a user. This is not enabled by default, please contact support@go1.com for access.",
        "parameters": [
          {
            "name": "user-id",
            "in": "path",
            "description": "User identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "redirect_url",
            "in": "query",
            "description": "Redirect path after login. Relative to portal domain.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A redirect URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.login"]
          }
        ]
      }
    },
    "/v2/users/reset_password": {
      "post": {
        "tags": ["Users"],
        "summary": "Reset a user's password",
        "description": "Given a valid email, this endpoint will send a password reset email to the email address.\nIf the OAuth token is a learner token, the given email has to be the learner's own email address, otherwise, it will return 403 error.\nIf the OAuth token is a portal admin token, the given email should belong to the admin user's portal, otherwise, it will return 200 as a silent error.\n",
        "requestBody": {
          "description": "Email address for sending password reset email",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The password reset email has been sent or a silent error if the email address is invalid.",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.read"]
          }
        ]
      }
    },
    "/v2/groups": {
      "get": {
        "tags": ["User Groups"],
        "summary": "List of UserGroups in my portal",
        "description": "Retrieves a list of UserGroups limited to 50",
        "parameters": [
          {
            "name": "mine",
            "in": "query",
            "description": "Filter my UserGroups based.\n\nAvailable values:\n* `true`: Only return my UserGroups, which I'm owning or joining.\n* `false`: Only return all available UserGroups on my portal.\n",
            "schema": {
              "type": "string",
              "default": "false",
              "enum": ["true", "false"]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. Maximum value is 50. Each endpoint has a default limit where applicable, so passing in a value is recommended.\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to start paging from.\n",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of UserGroups objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsExploreResult"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.read"]
          }
        ]
      },
      "post": {
        "tags": ["User Groups"],
        "summary": "Create a new UserGroup",
        "requestBody": {
          "description": "UserGroup to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created UserGroup object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupEntity"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.write"]
          }
        ]
      }
    },
    "/v2/groups/{group-id}": {
      "get": {
        "tags": ["User Groups"],
        "summary": "Get UserGroup detail",
        "description": "Gets the UserGroup detail for a given id.",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "description": "UserGroup identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of UserGroups objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupEntity"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "UserGroup not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.read"]
          }
        ]
      },
      "put": {
        "tags": ["User Groups"],
        "summary": "Modify UserGroup detail",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "description": "UserGroup identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "modify UserGroup info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No update processed",
            "content": {}
          },
          "201": {
            "description": "The updatd UserGroup object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupEntity"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.write"]
          }
        ]
      },
      "delete": {
        "tags": ["User Groups"],
        "summary": "Delete a UserGroup",
        "description": "Delete a UserGroup object for a given id.",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "description": "UserGroup identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The UserGroup was deleted",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Webhook not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.write"]
          }
        ]
      }
    },
    "/v2/groups/{group-id}/assignment": {
      "get": {
        "tags": ["User Groups"],
        "summary": "List of a certain UserGroup's assignments",
        "description": "Retrieves a list of assignments in a certain UserGroup limited to 50",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "description": "UserGroup identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. Maximum value is 50. Each endpoint has a default limit where applicable, so passing in a value is recommended.\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to start paging from.\n",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assignments objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsAssignmentsExploreResult"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "UserGroup not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.read"]
          }
        ]
      }
    },
    "/v2/groups/{group-id}/membership": {
      "get": {
        "tags": ["User Groups"],
        "summary": "List of a certain UserGroup's memberships",
        "description": "Retrieves a list of memberships in a certain UserGroup limited to 50",
        "parameters": [
          {
            "name": "group-id",
            "in": "path",
            "description": "UserGroup identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. Maximum value is 50. Each endpoint has a default limit where applicable, so passing in a value is recommended.\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to start paging from.\n",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of membership objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsMembershipsExploreResult"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "UserGroup not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.read"]
          }
        ]
      }
    },
    "/v2/groups/membership": {
      "post": {
        "tags": ["User Groups"],
        "summary": "Create a UserGroup Membership",
        "description": "Creates the UserGroup Membership for a given UserGroup ID and User IDs.",
        "requestBody": {
          "description": "UserGroup Membership to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupMembershipCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created UserGroup Memberships",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "membership_ids": {
                      "type": "array",
                      "description": "An array of created memberships' ID",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.write"]
          }
        ]
      }
    },
    "/v2/groups/membership/{membership-id}": {
      "delete": {
        "tags": ["User Groups"],
        "summary": "Delete a UserGroup Membership",
        "description": "Delete a UserGroup object for a given UserGroup ID and an User ID.",
        "parameters": [
          {
            "name": "membership-id",
            "in": "path",
            "description": "UserGroup Membership identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The UserGroup Membership was deleted",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Webhook not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.write"]
          }
        ]
      }
    },
    "/v2/groups/membership/delete": {
      "post": {
        "tags": ["User Groups"],
        "summary": "Delete multiple UserGroup Memberships by User IDs",
        "description": "Delete associate UserGroup Memberships with a given UserGroup ID and list of User IDs.",
        "requestBody": {
          "description": "UserGroup Membership to delete",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupMembershipDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The UserGroup Memberships are deleted",
            "content": {}
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.write"]
          }
        ]
      }
    },
    "/v2/groups/assignment": {
      "post": {
        "tags": ["User Groups"],
        "summary": "Create a UserGroup Assignment",
        "description": "Creates the UserGroup Assignment for a given UserGroup ID and Learning Object IDs.",
        "requestBody": {
          "description": "UserGroup to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupAssignmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created UserGroup assignment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "assignment_id": {
                      "type": "integer",
                      "description": "A created assignment ID"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.write"]
          }
        ]
      }
    },
    "/v2/groups/assignment/delete": {
      "delete": {
        "tags": ["User Groups"],
        "summary": "Delete a UserGroup Assignment",
        "description": "Remove a assigned Learning Object from a UserGroup object for a given UserGroupId and a Learning Object ID.",
        "requestBody": {
          "description": "UserGroup Assignment to delete",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupAssignmentDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The UserGroup Assignment is deleted",
            "content": {}
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["group.write"]
          }
        ]
      }
    },
    "/v2/webhooks": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "List webhooks",
        "description": "Retrieves a list of webhooks limited to 5 webhooks",
        "responses": {
          "200": {
            "description": "List of webhook objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["webhook.read"]
          }
        ]
      },
      "post": {
        "tags": ["Webhooks"],
        "summary": "Create new webhook",
        "description": "Will create a new webhook. Note regarding \"content_decommission\" webhook. This will fire for all decomissioned items, even if your portal does not have access to it.",
        "requestBody": {
          "description": "Webhook to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created webhook object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEntity"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "callbacks": {
          "webhook": {
            "http://www.example.com/my-webhook-handler": {
              "post": {
                "summary": "Webhook request",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/WebhookUserCreatePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookUserUpdatePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookUserDeletePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookEnrolmentCreatePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookEnrolmentUpdatePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookEnrolmentDeletePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookLOCreatePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookLOUpdatePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookLODeletePayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookContentDecommissionPayload"
                          },
                          {
                            "$ref": "#/components/schemas/WebhookContentUpdatePayload"
                          }
                        ],
                        "discriminator": {
                          "propertyName": "type",
                          "mapping": {
                            "user.create": "#/components/schemas/WebhookUserCreatePayload",
                            "user.update": "#/components/schemas/WebhookUserUpdatePayload",
                            "user.delete": "#/components/schemas/WebhookUserDeletePayload",
                            "enrolment.create": "#/components/schemas/WebhookEnrolmentCreatePayload",
                            "enrolment.update": "#/components/schemas/WebhookEnrolmentUpdatePayload",
                            "enrolment.delete": "#/components/schemas/WebhookEnrolmentDeletePayload",
                            "lo.create": "#/components/schemas/WebhookLOCreatePayload",
                            "lo.update": "#/components/schemas/WebhookLOUpdatePayload",
                            "lo.delete": "#/components/schemas/WebhookLODeletePayload",
                            "content_decommission": "#/components/schemas/WebhookContentDecommissionPayload",
                            "content_update": "#/components/schemas/WebhookContentUpdatePayload"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Successful"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["webhook.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/webhooks/{webhook-id}": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get webhook details",
        "description": "Get the webhook record",
        "parameters": [
          {
            "name": "webhook-id",
            "in": "path",
            "description": "Webhook identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The webhook object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEntity"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Webhook not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["webhook.read"]
          }
        ]
      },
      "patch": {
        "tags": ["Webhooks"],
        "summary": "Update webhook",
        "description": "Update webhook object",
        "parameters": [
          {
            "name": "webhook-id",
            "in": "path",
            "description": "Webhook identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated webhook object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEntity"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Webhook not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["webhook.write"]
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Webhooks"],
        "summary": "Delete a webhook",
        "description": "Delete a webhook record",
        "parameters": [
          {
            "name": "webhook-id",
            "in": "path",
            "description": "Webhook identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The webhook was deleted",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "Webhook not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["webhook.write"]
          }
        ]
      }
    },
    "/v2/graphql/query": {
      "post": {
        "tags": ["GraphQL"],
        "summary": "Fetch Learning Objects via a GraphQL endpoint",
        "description": "GO1 GraphQL Endpoints",
        "requestBody": {
          "description": "GraphQL Statement",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful request. Response structure depends on query",
            "content": {}
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "enrollment.read",
              "enrollment.write",
              "lo.read",
              "lo.write",
              "portal.read",
              "portal.write",
              "user.read",
              "user.write"
            ]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/mapping/user-mapping/{portal-id}": {
      "get": {
        "tags": ["Data Mapping"],
        "summary": "Get Portal's User Mapping detail",
        "description": "Gets the User Mapping detail for a given portal id.",
        "parameters": [
          {
            "name": "portal-id",
            "in": "path",
            "description": "Portal identifier number.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portal mapping object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserMappingEntity"
                }
              }
            }
          },
          "400": {
            "description": "Error with supplied parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "User is unauthenticated",
            "content": {}
          },
          "403": {
            "description": "User is not authorized",
            "content": {}
          },
          "404": {
            "description": "UserGroup not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": ["user.read"]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "required": ["features", "id", "plan", "url"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "features": {
            "$ref": "#/components/schemas/PortalFeatures"
          },
          "plan": {
            "$ref": "#/components/schemas/PortalPlan"
          },
          "url": {
            "type": "string",
            "description": "Portal URL"
          }
        },
        "example": {
          "id": 555,
          "features": {
            "marketplace": true
          },
          "plan": {
            "active_user_count": 5,
            "licensed_user_count": 10,
            "name": "annual",
            "pricing": {
              "currency": "USD",
              "price": 200,
              "tax": 10,
              "tax_included": true
            },
            "region": "AU",
            "renewal_date": "2019-01-03T04:19:59.000Z"
          },
          "url": "bobsbakery.mygo1.com"
        }
      },
      "AddCollectionItems": {
        "required": ["lo"],
        "type": "object",
        "properties": {
          "lo": {
            "type": "array",
            "description": "An array of learning object IDs to be added.",
            "example": [15, 60],
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AwardCreateRequest": {
        "required": ["title", "published", "number_pass_required", "items"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the award"
          },
          "description": {
            "type": "string",
            "description": "The description for the award"
          },
          "image": {
            "type": "string",
            "description": "The url to the award image"
          },
          "published": {
            "type": "boolean",
            "description": "Set this to 'true' to publish the award into the portal"
          },
          "number_pass_required": {
            "type": "integer",
            "description": "Set the minimum number of lessons passed for successful completion"
          },
          "label": {
            "type": "string",
            "description": "A label that is added to the award"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "entity_id": {
                  "type": "integer",
                  "description": "The lesson id"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the item. 'lo' (learning object) or 'award'"
                },
                "mandatory": {
                  "type": "boolean",
                  "description": "Set the lesson to mandatory or not."
                },
                "weight": {
                  "type": "integer",
                  "description": "The relative weight of the lesson."
                },
                "parent_id": {
                  "type": "integer",
                  "description": "The id of the parent learning object (used for child learning objects)"
                }
              }
            }
          }
        }
      },
      "AwardCreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "the id of the newly created award"
          }
        }
      },
      "AwardLoadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the award"
          },
          "title": {
            "type": "string",
            "description": "The title of the award"
          },
          "description": {
            "type": "string",
            "description": "The description for the award"
          },
          "image": {
            "type": "string",
            "description": "The url to the award image"
          },
          "published": {
            "type": "boolean",
            "description": "Set this to 'true' to publish the award into the portal"
          },
          "number_pass_required": {
            "type": "integer",
            "description": "Set the minimum number of lessons passed for successful completion"
          },
          "label": {
            "type": "string",
            "description": "A label that is added to the award"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "entity_id": {
                  "type": "integer",
                  "description": "The lesson id"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the item. 'li' (learning item) 'lo' (learning object) or 'award'"
                },
                "mandatory": {
                  "type": "boolean",
                  "description": "Set the lesson to mandatory or not."
                },
                "weight": {
                  "type": "integer",
                  "description": "The relative weight of the lesson."
                },
                "parent_id": {
                  "type": "integer",
                  "description": "The id of the parent learning object (used for child learning objects)"
                }
              }
            }
          }
        }
      },
      "BaseLO": {
        "required": [
          "description",
          "id",
          "language",
          "previewable",
          "tags",
          "title",
          "type",
          "published"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 555
          },
          "created_time": {
            "type": "string",
            "description": "Created date and time, formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339)",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Learning object description",
            "example": "This is a longer description of the learning object."
          },
          "image": {
            "type": "string",
            "description": "Image URL.",
            "example": "https://res.cloudinary.com/v1431504122/ztiqbtyqcncc5bnk6ef1.png"
          },
          "language": {
            "type": "string",
            "description": "Language code, according to [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
            "example": "en"
          },
          "previewable": {
            "type": "boolean",
            "description": "Whether a preview URL can be requested for this learning object."
          },
          "tags": {
            "type": "array",
            "example": ["tag1", "tag2"],
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "example": "Learning Object Title"
          },
          "type": {
            "type": "string",
            "example": "course",
            "enum": [
              "assignment",
              "course",
              "document",
              "event",
              "interactive",
              "lti",
              "question",
              "quiz",
              "text",
              "video"
            ]
          },
          "published": {
            "type": "boolean",
            "description": "Publish status."
          },
          "updated_time": {
            "type": "string",
            "description": "Updated date and time, formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339)",
            "format": "date-time"
          }
        },
        "description": "A base learning object with no children items."
      },
      "CoursePricing": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pricing"
          }
        ]
      },
      "LearningObjectProvider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 111222
          },
          "logo": {
            "type": "string",
            "description": "Image URL.",
            "example": "https://res.cloudinary.com/v1431504122/ztiqbtyqcncc5bnk6ef1.png"
          },
          "name": {
            "type": "string",
            "example": "Learning Provider"
          }
        }
      },
      "CourseSubscription": {
        "type": "object",
        "properties": {
          "licenses": {
            "type": "integer",
            "description": "The number of licenses. -1 means unlimited.",
            "example": 70
          },
          "package": {
            "type": "string",
            "example": "premium",
            "enum": ["premium"]
          }
        }
      },
      "CourseWithItems": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CourseWithoutItems"
          },
          {
            "required": ["items", "items_count"],
            "type": "object",
            "properties": {
              "items_count": {
                "type": "integer",
                "example": 1
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Module"
                }
              }
            },
            "description": "A course including its children items."
          }
        ]
      },
      "CourseWithoutItems": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseLO"
          },
          {
            "required": ["assessable", "collections", "delivery", "type"],
            "type": "object",
            "properties": {
              "assessable": {
                "type": "boolean",
                "description": "If true, the learning object will have a marking score upon completion.",
                "example": true
              },
              "collections": {
                "type": "array",
                "description": "An array of collection IDs the course is assigned to.",
                "example": [1, 4],
                "items": {
                  "type": "number"
                }
              },
              "delivery": {
                "$ref": "#/components/schemas/LODelivery"
              },
              "items": {
                "description": "#### DEPRECATED\n",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "items_count": {
                "description": "#### DEPRECATED\n",
                "type": "integer",
                "example": 1
              },
              "portal_collection": {
                "type": "boolean",
                "description": "Whether the course is included in the portal's default collection.",
                "example": true
              },
              "pricing": {
                "$ref": "#/components/schemas/CoursePricing"
              },
              "provider": {
                "$ref": "#/components/schemas/LearningObjectProvider"
              },
              "subscription": {
                "$ref": "#/components/schemas/CourseSubscription"
              },
              "type": {
                "type": "string",
                "example": "course",
                "enum": ["course"]
              },
              "attributes": {
                "type": "object",
                "properties": {}
              },
              "summary": {
                "type": "string",
                "example": "This is a course summary"
              },
              "authors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The author's full name"
                    },
                    "last_name": {
                      "type": "string",
                      "description": "the author's last name"
                    },
                    "first_name": {
                      "type": "string",
                      "description": "the author's first name"
                    },
                    "id": {
                      "type": "integer",
                      "description": "the id of the author"
                    }
                  }
                }
              },
              "custom_fields": {
                "type": "object",
                "description": "An object containing the custom learning object fields and values",
                "properties": {
                  "field_name": {
                    "type": "array",
                    "description": "A custom learning object field",
                    "items": {
                      "type": "string",
                      "description": "A value associated with the field"
                    }
                  }
                }
              }
            },
            "description": "A course excluding its children items."
          }
        ]
      },
      "Enrollment": {
        "required": [
          "id",
          "lo_id",
          "pass",
          "profile_id",
          "result",
          "status",
          "type",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "type": {
            "type": "string",
            "description": "The entity type",
            "example": "enrolment",
            "enum": ["enrolment"]
          },
          "profile_id": {
            "type": "integer",
            "example": 1
          },
          "parent_lo_id": {
            "type": "integer",
            "description": "Either the course or module learning object ID.",
            "example": 1
          },
          "parent_enrollment_id": {
            "type": "integer",
            "description": "The parent enrollment ID.",
            "example": 1
          },
          "parent_id": {
            "type": "integer",
            "example": 1
          },
          "lo_id": {
            "type": "integer",
            "description": "Learning object ID",
            "example": 1
          },
          "instance_id": {
            "type": "integer",
            "example": 1
          },
          "taken_instance_id": {
            "type": "integer",
            "example": 1
          },
          "start_date": {
            "type": "string",
            "description": "The date time the enrollment was started.",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "description": "The completion date of the enrollment if it has been completed.",
            "format": "date-time"
          },
          "result": {
            "type": "integer",
            "example": 50
          },
          "pass": {
            "type": "boolean",
            "description": "A boolean value if the enrollment has been passed.",
            "example": true
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "timestamp": {
            "type": "integer",
            "example": 1534751686
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in-progress", "completed"]
          },
          "due_date": {
            "type": "string",
            "description": "The due date of the enrollment if it was assigned.",
            "format": "date-time"
          },
          "lo_type": {
            "type": "string",
            "example": "course"
          },
          "original_enrolment_id": {
            "type": "integer",
            "example": 0
          },
          "user_id": {
            "type": "integer",
            "description": "User ID",
            "example": 1
          },
          "assigner": {
            "$ref": "#/components/schemas/EnrollmentAssigner"
          },
          "items": {
            "type": "array",
            "description": "The child enrollments",
            "items": {
              "$ref": "#/components/schemas/Enrollment"
            }
          },
          "registrations": {
            "type": "array",
            "description": "The LTI registration results information",
            "items": {
              "$ref": "#/components/schemas/RegistrationResults"
            }
          }
        }
      },
      "EnrollmentAssigner": {
        "required": [
          "avatar",
          "first_name",
          "id",
          "job_title",
          "last_name",
          "mail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User ID",
            "example": 3333
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "mail": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "job_title": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          }
        },
        "description": "The user who assigned the enrolment."
      },
      "EnrollmentCountResult": {
        "required": ["hits", "total"],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "example": 1
          },
          "hits": {
            "type": "object",
            "properties": {
              "lo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 123
                  }
                },
                "description": "Learning object ID"
              },
              "enrolments": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "example": 2
                  }
                }
              }
            }
          }
        },
        "description": "The number of total enrollments for one learning object."
      },
      "EnrollmentResults": {
        "required": [
          "created_time",
          "id",
          "lo_id",
          "parent_enrollment_id",
          "parent_lo_id",
          "pass",
          "status",
          "type",
          "updated_time",
          "user_id",
          "utm_source",
          "utm_content",
          "utm_medium",
          "utm_campaign"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The enrolment id. The primary key is id AND type, so do not use standalone.",
            "example": 99999
          },
          "type": {
            "type": "string",
            "description": "The entity type",
            "example": "enrolment",
            "enum": ["enrolment"]
          },
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "updated_time": {
            "type": "string",
            "format": "date-time"
          },
          "lo_id": {
            "type": "integer",
            "description": "Learning object ID",
            "example": 4444
          },
          "parent_lo_id": {
            "type": "integer",
            "description": "Either the course or module learning object ID.",
            "example": 5555
          },
          "parent_enrollment_id": {
            "type": "integer",
            "description": "The parent enrollment ID.",
            "example": 88888
          },
          "pass": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "example": "not-started",
            "enum": [
              "completed",
              "expired",
              "in-progress",
              "not-started",
              "pending",
              "assigned"
            ]
          },
          "user_id": {
            "type": "integer",
            "description": "User ID",
            "example": 2222
          },
          "utm_source": {
            "type": "string",
            "description": "The source of where this enrolment was created",
            "example": "msteams"
          },
          "utm_content": {
            "type": "string",
            "description": "The source content related to the creation of this enrolment",
            "example": "External_ID"
          },
          "utm_medium": {
            "type": "string",
            "description": "The medium related to the creation of this enrolment",
            "example": "desktop"
          },
          "utm_campaign": {
            "type": "string",
            "description": "The campaign related to the creation of this enrolment",
            "example": "SF-xxxxxxxx"
          },
          "lo": {
            "$ref": "#/components/schemas/EnrollmentLO"
          }
        }
      },
      "EnrollmentCreateResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "description": "User ID"
          },
          "lo_id": {
            "type": "integer",
            "description": "Learning object ID"
          },
          "parent_lo_id": {
            "type": "integer",
            "description": "Either the course or module learning object ID."
          },
          "parent_enrollment_id": {
            "type": "string",
            "description": "The parent enrollment ID.",
            "example": "1"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in-progress", "completed"]
          },
          "pass": {
            "type": "boolean"
          },
          "created_date": {
            "type": "string",
            "description": "The date and time the enrollment was created.",
            "format": "date-time"
          }
        }
      },
      "AwardEnrollmentCreateResult": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 777
          }
        }
      },
      "EnrollmentSearchResult": {
        "required": ["hits", "total"],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 100
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrollmentResults"
            }
          },
          "_scroll_id": {
            "type": "string",
            "example": "DnF1ZXJ5VGhlbkZldGNoBQAAAAAAdxBoFk5aQlBxZjNpUVNPV2NXaS1nOVNOT3cAAAAAAHcLhRZtTWVNbFE1UVI3R192d3dGeTdzS29BAAAAAAB3EGkWTlpCUHFmM2lRU09XY1dpLWc5U05PdwAAAAAAdwuGFm1NZU1sUTVRUjdHX3Z3d0Z5N3NLb0EAAAAAAHcQahZOWkJQcWYzaVFTT1djV2ktZzlTTk93"
          }
        }
      },
      "EnrollmentCreate": {
        "description": "The parameters need to be provided to create the enrollment. `attributes` is required if you are creating an manual enrolment.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "lo_id": {
                "type": "integer",
                "description": "Learning object ID to enrol into."
              },
              "parent_enrollment_id": {
                "type": "integer",
                "description": "Either the parent enrollment ID."
              },
              "parent_lo_id": {
                "type": "integer",
                "description": "Either the course or module learning object ID."
              },
              "user_id": {
                "type": "integer",
                "description": "User ID. Note, if a learner calls this endpoint they must provide their own user_id in order to create an enrolment for themself."
              }
            }
          },
          {
            "$ref": "#/components/schemas/ManualEnrollmentAttributes"
          }
        ]
      },
      "EnrollmentGoal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GoalPoint"
          },
          {
            "type": "object",
            "properties": {
              "requirements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GoalPoint"
                }
              }
            }
          }
        ]
      },
      "GoalPoint": {
        "type": "object",
        "properties": {
          "goal_id": {
            "type": "integer",
            "example": 888
          },
          "value": {
            "type": "integer",
            "format": "float"
          }
        }
      },
      "ManualEnrollmentAttributes": {
        "type": "object",
        "properties": {
          "attributes": {
            "required": ["date", "provider", "type"],
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date"
              },
              "description": {
                "type": "string"
              },
              "documents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "size": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              },
              "provider": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "COMMITTEE",
                  "CONFERENCE",
                  "EDUCATION",
                  "EVENT",
                  "EXAM",
                  "MENTORING",
                  "PODCAST",
                  "READING",
                  "SEMINAR",
                  "STUDY",
                  "TRAINING",
                  "VIDEO",
                  "WEBINAR",
                  "WORKSHOP"
                ]
              }
            }
          }
        },
        "description": "The learning attributes of an manual enrollment."
      },
      "AwardEnrollmentAttributes": {
        "type": "object",
        "properties": {
          "award_required": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrollmentGoal"
            }
          }
        },
        "description": "The points required of an individual award enrollment"
      },
      "AwardEnrollmentCreate": {
        "required": ["award_id", "user_id"],
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "description": "Award ID to enrol into.",
            "example": 777
          },
          "user_id": {
            "type": "integer",
            "description": "User ID",
            "example": 888
          },
          "due_date": {
            "type": "integer",
            "description": "Unix timestamp for when the award completion is due",
            "example": 1556252809
          }
        }
      },
      "EnrollmentLO": {
        "required": ["id", "title", "type"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 555
          },
          "delivery": {
            "$ref": "#/components/schemas/LODelivery"
          },
          "image": {
            "type": "string",
            "description": "Image URL",
            "example": "https://res.cloudinary.com/v1431504122/ztiqbtyqcncc5bnk6ef1.png"
          },
          "provider": {
            "$ref": "#/components/schemas/LearningObjectProvider"
          },
          "title": {
            "type": "string",
            "example": "Learning Object Title"
          },
          "type": {
            "type": "string",
            "example": "course",
            "enum": [
              "assignment",
              "course",
              "document",
              "event",
              "interactive",
              "lti",
              "question",
              "quiz",
              "text",
              "video"
            ]
          },
          "summary": {
            "type": "string",
            "example": "Learning Object Summary"
          }
        }
      },
      "Error": {
        "required": ["message"],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "InvalidInputError": {
        "required": ["message"],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "InvalidInputErrorVerbose": {
        "required": ["message"],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "CurrentPasswordInvalid": {
        "description": "Current password supplied is invalid."
      },
      "PasswordInvalid": {
        "description": "Password does not meet the password requirements"
      },
      "Facet": {
        "type": "object",
        "properties": {
          "buckets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "doc_count": {
                  "type": "number",
                  "example": 10
                },
                "key": {
                  "type": "string",
                  "example": "en"
                }
              }
            }
          },
          "doc_count_error_upper_bound": {
            "type": "number",
            "example": 0
          },
          "sum_other_doc_count": {
            "type": "number",
            "example": 3
          }
        }
      },
      "UserSearchResult": {
        "required": ["hits", "total"],
        "type": "object",
        "properties": {
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "total": {
            "type": "number",
            "example": 100
          }
        }
      },
      "LearningItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseLO"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "quiz",
                "enum": [
                  "assignment",
                  "document",
                  "event",
                  "interactive",
                  "lti",
                  "question",
                  "quiz",
                  "text",
                  "video"
                ]
              }
            },
            "description": "A learning item."
          }
        ]
      },
      "LearningObjectResponse": {
        "$ref": "#/components/schemas/CourseWithItems"
      },
      "LearningObjectSuggestionResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LearningObjectSuggestion"
        }
      },
      "LearningObjectCustomAttributesUpdate": {
        "type": "object",
        "properties": {},
        "description": "Custom attribute that we want to update. NAME: VALUE\n",
        "example": {
          "foo": "bar",
          "baz": "quz"
        }
      },
      "LearningObjectCustomAttributesResponse": {
        "type": "object",
        "properties": {
          "instance": {
            "type": "string",
            "example": "public.mygo1.com"
          },
          "entity_type": {
            "type": "string",
            "example": "lo"
          },
          "id": {
            "type": "integer",
            "example": 123
          },
          "foo": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "example": "bar"
              }
            }
          }
        }
      },
      "LearningObjectSuggestion": {
        "properties": {
          "suggest_type": {
            "type": "string",
            "example": "title"
          },
          "value": {
            "type": "string",
            "example": "10 Cute Animals With Secretly Scary Behaviors"
          },
          "formatted_value": {
            "type": "string",
            "example": "10 Cute <strong>Ani</strong>mals With Secretly Scary Behaviors"
          },
          "scopes": {
            "$ref": "#/components/schemas/LearningObjectSuggestionScopes"
          }
        }
      },
      "LearningObjectSuggestionScopes": {
        "properties": {
          "suggest_type": {
            "type": "string",
            "example": "title"
          },
          "id": {
            "type": "number",
            "example": 17586365
          },
          "portal_id": {
            "type": "number",
            "example": 17312397
          },
          "policy_id": {
            "type": "string",
            "example": "k576lq5neght1b4m1um47umfjr"
          }
        }
      },
      "LearningObjectsSearchResult": {
        "required": ["hits", "total"],
        "type": "object",
        "properties": {
          "facets": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Facet"
            }
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseWithoutItems"
            }
          },
          "total": {
            "type": "number",
            "example": 100
          },
          "_scroll_id": {
            "type": "string",
            "example": "DnF1AAJ5BBhlbkZldGNoAgAAAABBBAA1FkFOVWNyDANTUVplZzNwcFlfck5XLXcBBBAAAAAANhZBTlVjclBTU1FaZWczcHBZX3JOVy13"
          }
        }
      },
      "LinkCreate": {
        "required": ["title", "url"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Link title.",
            "example": "How to make cheese"
          },
          "url": {
            "type": "string",
            "description": "A valid URL.",
            "example": "http://learnthis.com/how-to-make-cheese"
          },
          "description": {
            "type": "string"
          },
          "language": {
            "type": "string",
            "description": "The language of the content to which the link points.\n\nAccepts two-letter [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for languages in lowercase, and optionally two-letter [ISO 3166-1 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for countries in lowercase, separated by a hyphen.\n\nDefaults to `en` if not specified.\n",
            "example": "en-us"
          }
        }
      },
      "Link": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LinkCreate"
          },
          {
            "required": ["id", "previewable"],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 123456
              },
              "previewable": {
                "type": "boolean",
                "description": "Whether a preview URL can be requested for this learning object.",
                "example": false
              }
            }
          }
        ]
      },
      "LOType": {
        "type": "string",
        "enum": [
          "learning_pathway",
          "course",
          "module",
          "award",
          "group",
          "achievement",
          "playlist"
        ],
        "example": "course"
      },
      "ManualCreate": {
        "required": ["provider", "title"],
        "type": "object",
        "properties": {
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "Manual title.",
            "example": "GO1 workshop"
          },
          "provider": {
            "minLength": 1,
            "type": "string",
            "description": "The workshop provider",
            "example": "GO1"
          },
          "language": {
            "type": "string",
            "description": "The language of the content to which the link points.\n\nAccepts two-letter [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for languages in lowercase, and optionally two-letter [ISO 3166-1 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for countries in lowercase, separated by a hyphen.\n\nDefaults to `en` if not specified.\n",
            "example": "en-us"
          }
        }
      },
      "Manual": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManualCreate"
          },
          {
            "required": ["id"],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 123456
              }
            }
          }
        ]
      },
      "LODelivery": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "Learning object duration in minutes.",
            "example": 600
          },
          "mode": {
            "type": "string",
            "example": "self-paced",
            "enum": ["self-paced"]
          }
        }
      },
      "Module": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseLO"
          },
          {
            "required": ["items", "type"],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LearningItem"
                }
              },
              "type": {
                "type": "string",
                "example": "module",
                "enum": ["module"]
              }
            },
            "description": "A module including its children items."
          }
        ]
      },
      "PreviewLinks": {
        "type": "object",
        "properties": {
          "player": {
            "type": "string",
            "description": "An URL to a directly launchable or embeddable player.",
            "example": "https://youtube.com/watch?v=123"
          },
          "resource": {
            "type": "string",
            "description": "An URL to the resource itself.",
            "example": "https://dropbox.com/video.mp4"
          }
        }
      },
      "PortalConfiguration": {
        "type": "object",
        "properties": {
          "pay_per_seat": {
            "type": "boolean",
            "example": true
          },
          "licensed_user_count": {
            "type": "integer",
            "example": 100
          },
          "life_cycle_stage": {
            "type": "string",
            "description": "Life Cycle Stage of the portal. This parameter needs special permissions, if you want to use this functionality please contact support.",
            "example": "live",
            "enum": ["trial", "live", "cancelled"]
          }
        }
      },
      "PortalCreationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/PortalCreationUserResponse"
          },
          "portal": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 366344
              },
              "title": {
                "type": "string",
                "description": "Domain of the created portal",
                "example": "myportal.mygo1.com"
              },
              "created": {
                "type": "string",
                "description": "Date time of when the portal was created",
                "format": "date-time"
              },
              "features": {
                "type": "object",
                "properties": {}
              },
              "configuration": {
                "type": "object",
                "properties": {}
              },
              "custom_fields": {
                "type": "object",
                "example": {
                  "field_name": "field_value"
                }
              },
              "client_auth": {
                "type": "object",
                "description": "Optional response. Will only be returned when client_auth parameter has been provided to the request",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "example": "0jh3hewadvhebsah73357in9zrrt95kzfs834jsxyr"
                  },
                  "client_secret": {
                    "type": "string",
                    "example": "82jf8jw38vjlgf95qjxd9qg113mgilgsfsdgs2rg4w"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "example": "http://localhost"
                  }
                }
              }
            }
          },
          "additional_users": {
            "type": "object",
            "properties": {
              "EMAIL_ADDRESS_OF_USER_AS_KEY": {
                "$ref": "#/components/schemas/PortalCreationUserResponse"
              }
            },
            "description": "Optional response. Will only be returned when additional_users parameter has been provided to the request"
          }
        }
      },
      "PortalCreationUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "UserID",
            "example": 44
          },
          "mail": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "created": {
            "type": "string",
            "description": "Date time of when the user account was created",
            "format": "date-time"
          },
          "roles": {
            "$ref": "#/components/schemas/UserRoles"
          },
          "status": {
            "type": "boolean",
            "description": "When false the user is deactivated"
          },
          "accounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "AccountID",
                  "example": 45
                },
                "mail": {
                  "type": "string",
                  "example": "john.doe@example.com"
                },
                "first_name": {
                  "type": "string",
                  "example": "John"
                },
                "last_name": {
                  "type": "string",
                  "example": "Doe"
                },
                "created": {
                  "type": "string",
                  "description": "Date time of when the user account was created",
                  "format": "date-time"
                },
                "roles": {
                  "$ref": "#/components/schemas/UserRoles"
                },
                "status": {
                  "type": "boolean",
                  "description": "When false the user is blocked"
                },
                "instance_name": {
                  "type": "string",
                  "description": "Name of the portal this account belongs to",
                  "example": "public.mygo1.com"
                }
              }
            }
          },
          "oauth_token": {
            "$ref": "#/components/schemas/AccesTokenResponse"
          }
        }
      },
      "AccesTokenResponse": {
        "type": "object",
        "properties": {
          "token_type": {
            "type": "string",
            "example": "Bearer"
          },
          "expires_in": {
            "type": "integer",
            "description": "Number of seconds in which the access token will expire",
            "example": 43200
          },
          "access_token": {
            "type": "string",
            "example": "eyJ0eXAiO...zMapA"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token to retrieve a new access token after it has become invalid. Refresh tokenes have an expiration date as well and are one time use only. You will get a new refresh token once used to retrieve a new access token.",
            "example": "ef50200fd6e...3beb937db0c5"
          }
        }
      },
      "PortalPlan": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "active_user_count": {
            "type": "integer",
            "example": 5
          },
          "licensed_user_count": {
            "type": "integer",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "annual"
          },
          "pricing": {
            "$ref": "#/components/schemas/PortalPricing"
          },
          "region": {
            "type": "string",
            "example": "AU"
          },
          "renewal_date": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-03T04:19:59.000Z"
          },
          "type": {
            "type": "string",
            "enum": ["marketplace", "platform", "portal", "premium"]
          }
        }
      },
      "PortalFeatures": {
        "required": ["marketplace"],
        "type": "object",
        "properties": {
          "marketplace": {
            "type": "boolean"
          }
        },
        "example": {
          "marketplace": true
        }
      },
      "PortalPricing": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pricing"
          }
        ]
      },
      "Pricing": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency in which price is set",
            "example": "USD"
          },
          "price": {
            "type": "number",
            "description": "Price of the learning item",
            "example": 200
          },
          "tax": {
            "type": "number",
            "description": "Tax included in the price",
            "example": 10
          },
          "tax_included": {
            "type": "boolean",
            "description": "Whether or not tax is included in the price",
            "example": true
          }
        }
      },
      "LoPricing": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency in which price is set",
            "example": "USD, AUD"
          },
          "price": {
            "type": "number",
            "description": "Price of the learning item",
            "example": 100
          },
          "tax": {
            "type": "number",
            "description": "Tax included in the price",
            "example": 15
          },
          "tax_included": {
            "type": "boolean",
            "description": "Whether or not tax is included in the price",
            "example": true
          },
          "tax_display": {
            "type": "boolean",
            "description": "Whether or not to display the tax information of the learning content to the user",
            "example": false
          }
        }
      },
      "RegistrationResults": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": 555
          },
          "registrationCompletion": {
            "type": "string",
            "description": "Registration completion status",
            "enum": ["UNKNOWN", "COMPLETED", "INCOMPLETE"]
          },
          "registrationSuccess": {
            "type": "string",
            "description": "Registration success status",
            "enum": ["UNKNOWN", "PASSED", "FAILED"]
          },
          "score": {
            "properties": {
              "scaled": {
                "type": "number",
                "description": "Scaled score between 0 and 100"
              }
            }
          },
          "totalSecondsTracked": {
            "type": "number"
          },
          "course": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "version": {
                "type": "number"
              }
            }
          },
          "learner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            }
          },
          "globalObjectives": {
            "type": "object",
            "description": "Objective details"
          },
          "activityDetails": {
            "type": "object",
            "description": "Activity details"
          },
          "suspendedActivityId": {
            "type": "string"
          },
          "registrationCompletionAmount": {
            "type": "number",
            "description": "A decimal value between 0 and 1 representing the percentage of this course that the learner has completed so far, if known. No"
          }
        }
      },
      "RemoveCollectionItems": {
        "required": ["lo"],
        "type": "object",
        "properties": {
          "lo": {
            "type": "array",
            "description": "An array of learning object IDs to be removed.",
            "example": [15, 60],
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "User": {
        "required": [
          "created",
          "email",
          "first_name",
          "id",
          "last_name",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 44
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "created": {
            "type": "string",
            "description": "Date time of when the user account was created",
            "format": "date-time"
          },
          "last_login": {
            "type": "string",
            "description": "Last time the user logged in",
            "format": "date-time"
          },
          "roles": {
            "$ref": "#/components/schemas/UserRoles"
          },
          "status": {
            "type": "boolean",
            "description": "When false the user is blocked"
          },
          "locale": {
            "type": "string",
            "description": "The user's locale setting in ISO format (e.g. en, pt-br)"
          },
          "custom_fields": {
            "type": "object",
            "properties": {},
            "description": "User's custom fields if the account has any.",
            "example": {
              "custom_field_1": "value 1",
              "custom_field_2": "value 2"
            }
          }
        }
      },
      "LearningActivityResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "total": {
              "type": "integer",
              "example": 1
            },
            "hits": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "14"
                },
                "enrolment_id": {
                  "type": "string",
                  "example": "100"
                },
                "user_id": {
                  "type": "string",
                  "example": "500"
                },
                "lo_id": {
                  "type": "string",
                  "example": "300"
                },
                "account_id": {
                  "type": "string",
                  "example": "444"
                },
                "portal_id": {
                  "type": "string",
                  "example": "11913446"
                },
                "raw_request": {
                  "type": "string",
                  "example": "{\n  \"_custom_field\": \"Sample_Text\",\n    \"_custom_field_2\": \"12345\"}"
                }
              }
            }
          }
        }
      },
      "RolesResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "example": "Software Developer"
            }
          }
        }
      },
      "SkillsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "example": "CI/CD"
            }
          }
        }
      },
      "UserCreate": {
        "required": ["email", "first_name", "last_name"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "roles": {
            "$ref": "#/components/schemas/UserRoles"
          },
          "locale": {
            "type": "string",
            "description": "Sets the user's locale upon creation. This field contains an ISO language field.\n",
            "example": "pt-br"
          },
          "password": {
            "type": "string",
            "description": "When provided, this will set the password for the newly created user.\nNote that the email address provided must not currently exist in any go1 portals. If so, an error will be returned.\n"
          },
          "send_login_email": {
            "type": "boolean",
            "description": "Defaults to true. Will send an email with a link allowing the user to login into GO1 and set his password.\n",
            "example": true
          },
          "custom_fields": {
            "type": "object",
            "properties": {},
            "description": "Custom fields that have been created in the system.\n\nNote: non-existent custom fields will be ignored.\n",
            "example": {
              "field_first_name": "John",
              "field_last_name": "Doe"
            }
          },
          "managers": {
            "type": "array",
            "description": "An array of managers' accountIDs for this user.",
            "example": [879578, 652234],
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "UserRoles": {
        "type": "array",
        "description": "Roles",
        "example": ["Learner", "Administrator"],
        "items": {
          "type": "string",
          "enum": [
            "Administrator",
            "Learner",
            "Assessor",
            "Manager",
            "Content administrator"
          ]
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "You must be an administrator across all of the user\\'s portals and Learner's email is not personal email addresses.\nPersonal email is email address which provided by 'gmail', 'yahoo', 'hotmail', 'aol', 'msn', 'live', 'outlook', 'icloud', 'bigpond', 'btconnect', 'virginmedia', or 'sky'\n"
          },
          "status": {
            "type": "boolean",
            "description": "When false the user is blocked",
            "example": true
          },
          "roles": {
            "$ref": "#/components/schemas/UserRoles"
          },
          "custom_fields": {
            "type": "object",
            "properties": {},
            "description": "Custom fields that have been created in the system.\n\nNote: non-existent custom fields will be ignored.\n",
            "example": {
              "foo": "bar",
              "baz": "quz"
            }
          },
          "managers": {
            "type": "array",
            "description": "An array of managers' accountIDs for this user. The manager's list will be replaced with the one sent. Existing managers not included in the update list will be removed.",
            "example": [879578, 652234],
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "UserSelfUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "language": {
            "type": "string",
            "example": "en"
          },
          "current_password": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "description": "A valid current password must be supplied in order to update A password requires at least 1 letter and must be at least 8 characters long"
          },
          "custom_fields": {
            "type": "object",
            "properties": {},
            "description": "Custom fields that have been created in the system.\n\nNote: non-existent custom fields will be ignored.\n",
            "example": {
              "foo": "bar",
              "baz": "quz"
            }
          }
        }
      },
      "UserGroupsExploreResult": {
        "required": ["hits", "total"],
        "type": "object",
        "properties": {
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupEntity"
            }
          },
          "total": {
            "type": "number",
            "example": 5
          }
        }
      },
      "UserGroupEntity": {
        "description": "UserGroup data",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "UserGroup ID"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "admin": {
            "type": "array",
            "description": "Array to group's admin UserIDs",
            "items": {
              "type": "integer"
            }
          },
          "joined": {
            "type": "integer",
            "description": "When 1 the user is a member of this group"
          },
          "total_member": {
            "type": "integer"
          },
          "total_assignment": {
            "type": "integer"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "portal": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "logo": {
                "type": "string"
              }
            }
          }
        }
      },
      "UserGroupCreate": {
        "required": ["title"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "UserGroup title."
          },
          "description": {
            "type": "string",
            "description": "UserGroup description."
          },
          "image": {
            "type": "string",
            "description": "Image URL.",
            "example": "https://res.cloudinary.com/v1431504122/ztiqbtyqcncc5bnk6ef1.png"
          }
        }
      },
      "UserGroupUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "UserGroup title."
          },
          "description": {
            "type": "string",
            "description": "UserGroup description."
          },
          "image": {
            "type": "string",
            "description": "Image URL.",
            "example": "https://res.cloudinary.com/v1431504122/ztiqbtyqcncc5bnk6ef1.png"
          }
        }
      },
      "UserGroupsMembershipsExploreResult": {
        "required": ["hits", "total"],
        "type": "object",
        "properties": {
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupMembershipEntity"
            }
          },
          "total": {
            "type": "number",
            "example": 5
          }
        }
      },
      "UserGroupMembershipEntity": {
        "description": "UserGroup's Membership data",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Member's UserID"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "joined_date": {
            "type": "integer"
          },
          "membership_id": {
            "type": "integer"
          }
        }
      },
      "UserGroupsAssignmentsExploreResult": {
        "required": ["hits", "total"],
        "type": "object",
        "properties": {
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupAssignmentEntity"
            }
          },
          "total": {
            "type": "number",
            "example": 5
          }
        }
      },
      "UserGroupAssignmentEntity": {
        "description": "UserGroup's Assignment data",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Assignment Learning Object ID"
          },
          "type": {
            "type": "string",
            "description": "Assignment Learning Object Type"
          },
          "portal_id": {
            "type": "integer",
            "description": "Learning Object owning Portal ID"
          }
        }
      },
      "UserGroupMembershipCreate": {
        "required": ["group_id", "user_ids"],
        "type": "object",
        "properties": {
          "group_id": {
            "type": "integer",
            "description": "UserGroup identifier number."
          },
          "user_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "An array of Users' ID to be added."
            }
          }
        }
      },
      "UserGroupMembershipDelete": {
        "required": ["group_id", "user_ids"],
        "type": "object",
        "properties": {
          "group_id": {
            "type": "integer",
            "description": "UserGroup identifier number."
          },
          "user_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "An array of Users' ID to be deleted."
            }
          }
        }
      },
      "UserGroupAssignmentCreate": {
        "required": ["group_id", "lo_ids"],
        "type": "object",
        "properties": {
          "group_id": {
            "type": "integer",
            "description": "UserGroup identifier number."
          },
          "lo_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "An array of Learning Objects' ID to be added."
            }
          },
          "due_date": {
            "type": "integer",
            "description": "Unix timestamp for when the assignment content completion is due.",
            "example": 1556252809
          }
        }
      },
      "UserGroupAssignmentDelete": {
        "required": ["group_id", "lo_id"],
        "type": "object",
        "properties": {
          "group_id": {
            "type": "integer",
            "description": "UserGroup identifier number."
          },
          "lo_id": {
            "type": "integer",
            "description": "A Learning Object's ID to be added."
          }
        }
      },
      "WebhookEntity": {
        "description": "Webhook data",
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookReplace"
          }
        ]
      },
      "WebhookReplace": {
        "description": "Webhook data",
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookUpdate"
          }
        ]
      },
      "WebhookUpdate": {
        "description": "Webhook data",
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookCreate"
          }
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 3600
          }
        }
      },
      "WebhookCreate": {
        "type": "object",
        "properties": {
          "enrollment_create": {
            "type": "boolean",
            "example": false
          },
          "enrollment_delete": {
            "type": "boolean",
            "example": false
          },
          "enrollment_update": {
            "type": "boolean",
            "example": false
          },
          "lo_create": {
            "type": "boolean",
            "example": true
          },
          "lo_delete": {
            "type": "boolean",
            "example": true
          },
          "lo_update": {
            "type": "boolean",
            "example": true
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "secret_key": {
            "type": "string",
            "example": "our_little_secret"
          },
          "url": {
            "type": "string",
            "example": "http://www.example.com/my-webhook-handler"
          },
          "user_create": {
            "type": "boolean",
            "example": true
          },
          "user_delete": {
            "type": "boolean",
            "example": false
          },
          "user_update": {
            "type": "boolean",
            "example": false
          },
          "content_update": {
            "type": "boolean",
            "example": false
          },
          "content_decommission": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "Webhook data"
      },
      "WebhookSearchResult": {
        "required": ["hits", "total"],
        "type": "object",
        "properties": {
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEntity"
            }
          },
          "total": {
            "type": "number",
            "example": 5
          }
        }
      },
      "WebhookBasePayload": {
        "required": ["fired_at"],
        "type": "object",
        "description": "Webhook base payload",
        "properties": {
          "fired_at": {
            "type": "string",
            "description": "Fired date and time, ISO 8601 formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339)",
            "format": "date-time",
            "example": "2021-03-31T00:35:29+0000"
          }
        }
      },
      "WebhookUserPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "828825"
          },
          "email": {
            "type": "string",
            "example": "webhooktest@go1.com"
          },
          "full_name": {
            "type": "string",
            "example": "Webhook Tester"
          },
          "first_name": {
            "type": "string",
            "example": "Webhook"
          },
          "last_name": {
            "type": "string",
            "example": "Tester"
          },
          "profile_picture": {
            "type": "string",
            "example": "https://go1.com/avatar.jpg"
          },
          "created_time": {
            "type": "number",
            "format": "timestamp",
            "example": 1557444120
          }
        }
      },
      "WebhookUserCreatePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["user.create"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookUserPayload"
          }
        }
      },
      "WebhookUserUpdatePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["user.update"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookUserPayload"
          },
          "original": {
            "$ref": "#/components/schemas/WebhookUserPayload"
          }
        }
      },
      "WebhookUserDeletePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["user.delete"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookUserPayload"
          }
        }
      },
      "WebhookEnrolmentPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "11738771"
          },
          "user_id": {
            "type": "integer",
            "example": 16147619
          },
          "lo_id": {
            "type": "string",
            "example": "11737589"
          },
          "lo_type": {
            "$ref": "#/components/schemas/LOType"
          },
          "taken_instance_id": {
            "type": "string",
            "example": "11663248"
          },
          "actor_id": {
            "type": "integer",
            "example": 16147619
          },
          "award": {
            "$ref": "#/components/schemas/WebhookEnrolmentAward"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in-progress", "completed"],
            "example": "in-progress"
          },
          "pass": {
            "type": "string",
            "example": "0"
          },
          "result": {
            "type": "string",
            "example": "0"
          },
          "completed_time": {
            "type": "string",
            "format": "date-time",
            "example": "2021-03-31 00:46:37"
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "example": "2021-03-31 00:36:27"
          }
        }
      },
      "WebhookEnrolmentAward": {
        "type": "object",
        "properties": {
          "required": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEnrolmentGoalRequired"
            }
          },
          "achieved": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEnrolmentGoalRequired"
            }
          }
        }
      },
      "WebhookEnrolmentGoalRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookEnrolmentGoalPoint"
          },
          {
            "type": "object",
            "properties": {
              "requirements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WebhookEnrolmentGoalPoint"
                }
              }
            }
          }
        ]
      },
      "WebhookEnrolmentGoalPoint": {
        "type": "object",
        "properties": {
          "goal_id": {
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "type": "integer",
            "format": "float"
          }
        }
      },
      "WebhookEnrolmentCreatePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["enrolment.create"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookEnrolmentPayload"
          }
        }
      },
      "WebhookEnrolmentUpdatePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["enrolment.update"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookEnrolmentPayload"
          },
          "original": {
            "$ref": "#/components/schemas/WebhookEnrolmentPayload"
          }
        }
      },
      "WebhookEnrolmentDeletePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["enrolment.delete"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookEnrolmentPayload"
          }
        }
      },
      "WebhookLOPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "11737589"
          },
          "type": {
            "$ref": "#/components/schemas/LOType"
          },
          "title": {
            "type": "string",
            "example": "Test course"
          },
          "description": {
            "type": "string",
            "example": "<p>Description</p>"
          }
        }
      },
      "WebhookLOCreatePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["lo.create"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookLOPayload"
          }
        }
      },
      "WebhookLOUpdatePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["lo.update"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookLOPayload"
          },
          "original": {
            "$ref": "#/components/schemas/WebhookLOPayload"
          }
        }
      },
      "WebhookLODeletePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["lo.delete"]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookLOPayload"
          }
        }
      },
      "WebhookContentDecommissionPayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["content_decommission"]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "11740419"
              },
              "type": {
                "$ref": "#/components/schemas/LOType"
              },
              "title": {
                "type": "string",
                "example": "Test course"
              },
              "decommission_time": {
                "type": "number",
                "format": "timestamp",
                "example": 1617155556
              },
              "remove_time": {
                "type": "number",
                "format": "timestamp",
                "example": 1625104356
              }
            }
          }
        }
      },
      "WebhookContentUpdatePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookBasePayload"
          }
        ],
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["content_update"]
          },
          "data": {
            "type": "object",
            "properties": {
              "loIds": {
                "type": "array",
                "example": [22646286, 22906633],
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://bobsbakery.mygo1.com/p/#/one-time-link?token=1:1234567:abcd-efgh:bobsbakery.mygo1.com"
          }
        },
        "description": "A one time login URL for a user"
      },
      "UserResetPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          }
        },
        "description": "An email address to be used for sending password reset email"
      },
      "OnboardPortalCreate": {
        "required": ["creation_path", "customer", "portal", "user"],
        "type": "object",
        "properties": {
          "creation_path": {
            "$ref": "#/components/schemas/OnboardPath"
          },
          "customer": {
            "$ref": "#/components/schemas/OnboardCustomer"
          },
          "partner_portal_id": {
            "$ref": "#/components/schemas/OnboardPartnerPortalId"
          },
          "portal": {
            "$ref": "#/components/schemas/OnboardPortal"
          },
          "referrer": {
            "$ref": "#/components/schemas/OnboardReferrer"
          },
          "user": {
            "$ref": "#/components/schemas/OnboardUser"
          },
          "additional_users": {
            "$ref": "#/components/schemas/OnboardAdditionalUsers"
          }
        }
      },
      "OnboardPath": {
        "type": "string",
        "description": "For development and testing, send \"test\", unless otherwise instructed by GO1. When your integration is production-ready, you will need to update this value for your production portal to \"integration\" or \"group-assignment\". With group-assignment you will need to send group IDs. Please contact support for more information about possible creation path for your use-case.\n",
        "example": "partner_hub"
      },
      "OnboardCustomer": {
        "required": ["name", "industry", "country"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Bob's Bakery"
          },
          "industry": {
            "minLength": 1,
            "type": "string",
            "description": "List of industries can be found here: https://api.go1.co/portal/properties/industry",
            "example": "Aerospace"
          },
          "country": {
            "type": "string",
            "description": "List of countries can be found here: https://api.go1.co/portal/properties/country",
            "example": "AU"
          },
          "billing_interval": {
            "type": "string",
            "description": "How often does the billing occur. Defaults to annual.",
            "enum": ["annual", "monthly"]
          }
        }
      },
      "OnboardPartnerPortalId": {
        "minimum": 1,
        "type": "integer",
        "description": "Partner portal ID. This will be provided by GO1 when your partner portal is provisioned and is used to associate the created portal to your partnership.",
        "example": 55885
      },
      "OnboardPortal": {
        "required": ["domain", "seats"],
        "type": "object",
        "properties": {
          "seats": {
            "type": "integer",
            "description": "The number of licensed users for this account."
          },
          "domain": {
            "minLength": 1,
            "type": "string",
            "description": "Domain name for the new portal. Must be a first level subdomain to mygo1.com",
            "format": "hostname",
            "example": "mynewportal.mygo1.com"
          },
          "administrators": {
            "type": "array",
            "description": "Emails for existing accounts that should be added as administrators",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "content_group_ids": {
            "type": "array",
            "description": "Content Group the new portal should have access to. This will be provided by GO1.",
            "items": {
              "type": "integer",
              "example": 123
            }
          },
          "notifications": {
            "type": "boolean",
            "description": "Option to disable or enable notifications portal wide (defaults to enable - true)",
            "example": true
          },
          "custom_fields": {
            "type": "object",
            "description": "An object containing the custom portal fields and values to be set during portal creation",
            "properties": {
              "field_name": {
                "type": "string",
                "description": "Replace field_name with the custom machine readable field name"
              }
            }
          },
          "client_auth": {
            "type": "boolean",
            "description": "Option to create an auth app with client credentials. You can also send `{name:string, redirect_uri:string}` to customize the auth app details. NOTE - Leaving the parameter in the request will also generate client credentials. If you do not need credentials to be generated please remove client_auth entirely from your request.",
            "example": true
          }
        }
      },
      "OnboardUser": {
        "required": ["consent", "email", "phone", "first_name", "last_name"],
        "type": "object",
        "description": "This is the portal owner. This must be an actual customer admin user.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "first_name": {
            "minLength": 1,
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "minLength": 1,
            "type": "string",
            "example": "Doe"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "example": 61444555666
          },
          "consent": {
            "required": ["term_collection", "term_privacy", "term_tos"],
            "type": "object",
            "properties": {
              "term_privacy": {
                "type": "boolean"
              },
              "term_tos": {
                "type": "boolean"
              },
              "term_collection": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "OnboardReferrer": {
        "type": "string",
        "description": "Application name or identifier responsible for creating the portal"
      },
      "OnboardAdditionalUsers": {
        "type": "array",
        "description": "All additional users created will have admin privileges. If a Partner wants to create a support account on their customer's portal, they may use this field.",
        "items": {
          "$ref": "#/components/schemas/OnboardUser"
        }
      },
      "PortalUserMappingEntity": {
        "description": "Portal Mapping data",
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string",
            "description": "configured External ID attribute",
            "example": "mail"
          },
          "action": {
            "type": "string",
            "description": "configured mapping action",
            "example": "merged"
          },
          "updated": {
            "type": "number",
            "format": "timestamp",
            "example": 1625104356
          },
          "author": {
            "type": "object",
            "properties": {
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              }
            }
          },
          "mappings": {
            "type": "object",
            "properties": {
              "mail": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "roles": {
                "type": "string"
              },
              "managers": {
                "type": "string"
              },
              "groups": {
                "type": "string"
              },
              "custom-fields": {
                "type": "string"
              }
            }
          }
        }
      },
      "Dimension": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "It represents the key associated with `topics` ,`region_relevance` and `entry_level`"
          },
          "value": {
            "type": "string",
            "description": "It represents the value associated with `topics`,`region_relevance` and `entry_level`"
          }
        },
        "required": ["key"]
      },
      "SimpleDimension": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "It represents the key associated with `topics` ,`region_relevance` and `entry_level`"
          }
        },
        "required": ["key"]
      },
      "CreateLearningObject": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Attributes containing auxiliary metadata about learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateLoAttributes"
              }
            ]
          },
          "can_mark_as_complete": {
            "type": "boolean",
            "description": "Whether or not this learning item can be marked as complete without completing it. Possible values true or false"
          },
          "decommission_at": {
            "type": "string",
            "description": "A valid ISO date relative to and less than the retire_at date for which no new enrolments are accepted",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Description of the learning content"
          },
          "duration": {
            "type": "number",
            "description": "Total duration of the learning content"
          },
          "image": {
            "type": "string",
            "description": "Placeholder image url for learning content"
          },
          "instance": {
            "type": "number",
            "description": "Portal to which this learning content belongs"
          },
          "language": {
            "type": "string",
            "description": "A valid ISO-639 language code with an optional ISO-3166 two character country code, separated by a hyphen. For example 'en-US', according to [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
            "example": "en"
          },
          "marketplace": {
            "type": "boolean",
            "description": "Whether or not this learning content is available to marketplace"
          },
          "premium": {
            "type": "boolean",
            "description": "Whether or not this learning content is available in premium."
          },
          "pricing": {
            "description": "Pricing of the learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoPricing"
              }
            ]
          },
          "published": {
            "type": "boolean",
            "description": "Flag to make the LO available to learners"
          },
          "retire_at": {
            "type": "string",
            "description": "A valid ISO date which tells when this learning content is to be removed from the portal",
            "format": "date-time"
          },
          "source_id": {
            "type": "string",
            "description": "Description of the learning content"
          },
          "summary": {
            "type": "string",
            "description": "Summary of the learning content"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the learning content i.e giving high level overview of the content"
          },
          "title": {
            "type": "string",
            "description": "Title of the learning content"
          },
          "type": {
            "type": "string",
            "description": "Type of the learning content",
            "example": "link"
          }
        },
        "required": [
          "attributes",
          "description",
          "duration",
          "image",
          "language",
          "premium",
          "source_id",
          "title",
          "type"
        ]
      },
      "CreateLinkLearningObject": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Attributes containing auxiliary metadata about learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateLinkLoAttributes"
              }
            ]
          },
          "authentication_type": {
            "type": "string",
            "description": "Type of authentication used to get info about a learning content. For example - SAML. Default is 'none'",
            "example": "saml, none"
          },
          "can_embed": {
            "type": "boolean",
            "description": "Flag to load the content in a new window or an iframe"
          },
          "can_mark_as_complete": {
            "type": "boolean",
            "description": "Whether or not this learning item can be marked as complete without completing it. Possible values true or false"
          },
          "decommission_at": {
            "type": "string",
            "description": "A valid ISO date relative to and less than the retire_at date for which no new enrolments are accepted",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Description of the learning content"
          },
          "duration": {
            "type": "number",
            "description": "Total duration of the learning content"
          },
          "image": {
            "type": "string",
            "description": "Placeholder image url for learning content"
          },
          "instance": {
            "type": "number",
            "description": "Portal to which this learning content belongs"
          },
          "language": {
            "type": "string",
            "description": "A valid ISO-639 language code with an optional ISO-3166 two character country code, separated by a hyphen. For example 'en-US', according to [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
            "example": "en"
          },
          "marketplace": {
            "type": "boolean",
            "description": "Whether or not this learning content is available to marketplace"
          },
          "premium": {
            "type": "boolean",
            "description": "Whether or not this learning content is available in premium."
          },
          "pricing": {
            "description": "Pricing of the learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoPricing"
              }
            ]
          },
          "published": {
            "type": "boolean",
            "description": "Flag to make the LO available to learners"
          },
          "retire_at": {
            "type": "string",
            "description": "A valid ISO date which tells when this learning content is to be removed from the portal",
            "format": "date-time"
          },
          "source_id": {
            "type": "string",
            "description": "Description of the learning content"
          },
          "summary": {
            "type": "string",
            "description": "Summary of the learning content"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the learning content i.e giving high level overview of the content"
          },
          "title": {
            "type": "string",
            "description": "Title of the learning content"
          },
          "type": {
            "type": "string",
            "description": "Type of the learning content",
            "example": "link"
          },
          "url": {
            "type": "string",
            "description": "Url pointing to the learning content. This field is ignored & optional when attributes.integration is set to true. Required when attributes.integration is false."
          }
        },
        "required": [
          "attributes",
          "description",
          "duration",
          "image",
          "language",
          "premium",
          "source_id",
          "title",
          "type"
        ]
      },
      "PatchLearningObject": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Attributes containing auxiliary metadata about learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchLoAttributes"
              }
            ]
          },
          "can_mark_as_complete": {
            "type": "boolean",
            "description": "Whether or not a learning content can be marked as complete by a user without completing it"
          },
          "decommission_at": {
            "format": "date-time",
            "type": "string",
            "description": "A valid ISO date relative to and less than the retire_at date for which no new enrolments are accepted"
          },
          "description": {
            "type": "string",
            "description": "Description of the Learning Content"
          },
          "duration": {
            "type": "number",
            "description": "Total duration of the learning content"
          },
          "image": {
            "type": "string",
            "description": "Placeholder image url for the learning content"
          },
          "instance": {
            "type": "number",
            "description": "Portal to which this learning content belongs"
          },
          "language": {
            "type": "string",
            "description": "A valid ISO-639 language code with an optional ISO-3166 two character country code, separated by a hyphen. For example 'en-US', according to [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
            "example": "en"
          },
          "marketplace": {
            "type": "boolean",
            "description": "Flag to make the LO available on Marketplace"
          },
          "premium": {
            "type": "boolean",
            "description": "Flag to make the LO available on Premium"
          },
          "pricing": {
            "description": "Pricing of the learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoPricing"
              }
            ]
          },
          "published": {
            "type": "boolean",
            "description": "Flag to make the LO available to learners"
          },
          "retire_at": {
            "format": "date-time",
            "type": "string",
            "description": "A valid ISO date which tells when this learning content is to be removed from the portal"
          },
          "source_id": {
            "type": "string",
            "description": "A unique identifier assigned to the learning content by the caller when the learning content first gets created."
          },
          "summary": {
            "type": "string",
            "description": "Summary of the learning content"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Learning object tags"
          },
          "title": {
            "type": "string",
            "description": "Tags associated with the learning content i.e giving high level overview of the content"
          },
          "url": {
            "type": "string",
            "description": "Learning content's url. This field is ignored & optional when attributes.integration is set to true. Required when attributes.integration is false."
          }
        }
      },
      "PatchLinkLearningObject": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Attributes containing auxiliary metadata about learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchLinkLoAttributes"
              }
            ]
          },
          "authentication_type": {
            "type": "string",
            "description": "Type of authentication used to get info about a learning content. For example - SAML. Default is 'none'",
            "example": "saml, none"
          },
          "can_embed": {
            "type": "boolean",
            "description": "Flag to load the content in a new window or an iframe",
            "example": false
          },
          "can_mark_as_complete": {
            "type": "boolean",
            "description": "Whether or not a learning content can be marked as complete by a user without completing it"
          },
          "decommission_at": {
            "format": "date-time",
            "type": "string",
            "description": "A valid ISO date relative to and less than the retire_at date for which no new enrolments are accepted"
          },
          "description": {
            "type": "string",
            "description": "Description of the Learning Content"
          },
          "duration": {
            "type": "number",
            "description": "Total duration of the learning content"
          },
          "image": {
            "type": "string",
            "description": "Placeholder image url for learning content"
          },
          "instance": {
            "type": "number",
            "description": "Portal to which learning content belongs, for internal use only"
          },
          "language": {
            "type": "string",
            "description": "Language in which learning content can be consumed. For example - spanish, german etc, according to [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
            "example": "en"
          },
          "marketplace": {
            "type": "boolean",
            "description": "Flag to make the LO available on Marketplace"
          },
          "premium": {
            "type": "boolean",
            "description": "Flag to make the LO available on Premium"
          },
          "pricing": {
            "description": "Pricing of the learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoPricing"
              }
            ]
          },
          "published": {
            "type": "boolean",
            "description": "Flag to make the LO available to learners"
          },
          "retire_at": {
            "format": "date-time",
            "type": "string",
            "description": "A valid ISO date which tells when this learning content is to be removed from the portal"
          },
          "source_id": {
            "type": "string",
            "description": "A unique identifier assigned to the learning content by the caller when the learning content first gets created"
          },
          "summary": {
            "type": "string",
            "description": "Summary of the learning content"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the learning content i.e giving high level overview of the content"
          },
          "title": {
            "type": "string",
            "description": "Title of the learning content"
          },
          "url": {
            "type": "string",
            "description": "Url pointing to the learning content. This field is ignored & optional when attributes.integration is set to true. Required when attributes.integration is false."
          }
        }
      },
      "CreateLoAttributes": {
        "type": "object",
        "properties": {
          "year_created": {
            "type": "string",
            "description": "Year in which learning content was created",
            "example": 2021
          },
          "mobile_optimized": {
            "type": "boolean",
            "description": "Whether or not Learning content can be consumed through mobiles devices efficiently. Possible values `0` or `1`"
          },
          "assessable": {
            "type": "boolean",
            "description": "Whether or not Learning content is assessed. Possible values `0` or `1`"
          },
          "wcag": {
            "type": "boolean",
            "description": "Whether learning content is more accessible to a wide range of people with disabilities, including blindness and low vision, deafness and hearing loss, learning disabilities, cognitive limitations, limited movement, speech disabilities, photosensitivity and combinations of these. Possible values `0` or `1`"
          },
          "region_relevance": {
            "type": "array",
            "description": "Regions in which learning content is not restricted. If set to GLOBAL, it can be consumed through out the globe. Please see a full list of regions and their corresponding keys below. For example to set a region to `AU` you nee to pass `key` as `496`\n<details>\n\n  <summary>keys mapped to their regions</summary>\n      <ul>\n         <li>495 - GLOBAL</li>\n         <li>496 - AU</li>\n         <li>497 - US</li>\n         <li>498 - GB</li>\n         <li>499 - NZ</li>\n         <li>500 - MY</li>\n         <li>501 - ZA</li>\n         <li>515 - CA</li>\n         <li>516 - UAE</li>\n      </ul>\n</details>",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            }
          },
          "learning_outcomes": {
            "type": "array",
            "description": "Learning outcomes after consuming a particular learning content",
            "items": {
              "type": "string"
            }
          },
          "topics": {
            "minItems": 2,
            "type": "array",
            "description": "\nTopics discussed in a particular learning content. They are categorized on three different levels `Level 1` , `Level 2` and `Level 3` topics. Each level is mapped to their corresponding descendent level in order to create topics tree internally.For example - `65 - Business Skills` is of `Level 1` and it's corresponding `Level 2` topic is `28 - Marketing` and `Level 3` topic `143 - Product Marketing` So inorder to create topics you should be passing keys `65, 28, 143`. Below is a full list of each `Level 1` topics mapped to their `Level 2` and `Level 3` topics. Note: You'll need pass at least two entries in order to create topics. For entries that don't have any descendent levels just pass `NULL`\n<details>\n  <summary>65 - Business Skills</summary>\n\n   + <details>\n            <summary>3 - Investment and Trading</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>4 - Industrial Skills</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>9 - Digital Marketing</summary>\n              <ul>\n               <li>128 - Search Engine Optimisation</li>\n               <li>129 - Social Media Marketing</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>15 - People and Communication Skills</summary>\n              <ul>\n               <li>160 - Business Writing</li>\n               <li>161 - Telephone Skills</li>\n               <li>162 - Presentation Skills</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>16 - Accounting and Finance</summary>\n              <ul>\n               <li>123 - Taxes</li>\n               <li>124 - Finance</li>\n               <li>125 - Accounting</li>\n               <li>126 - Auditing</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>25 - Entrepreneurship</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>26 - General Management</summary>\n              <ul>\n               <li>130 - Business Operations</li>\n               <li>131 - Business Strategy</li>\n               <li>132 - Change Management</li>\n               <li>511 - Remote Working</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>28 - Marketing</summary>\n              <ul>\n               <li>143 - Product Marketing</li>\n               <li>144 - Public relations</li>\n               <li>145 - Marketing Fundamentals</li>\n               <li>146 - Branding</li>\n               <li>147 - Social Media</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>30 - Legal</summary>\n              <ul>\n               <li>473 - CPD</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>32 - Human Resources</summary>\n              <ul>\n               <li>133 - Business ethics</li>\n               <li>134 - Human Resources Administration</li>\n               <li>135 - Change Management</li>\n               <li>136 - Hiring</li>\n               <li>137 - Diversity & Culture</li>\n               <li>138 - Performance Management</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>58 - Housing and Real Estate</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>60 - Leadership</summary>\n              <ul>\n               <li>139 - Team Building & Teamwork</li>\n               <li>140 - Negotiation</li>\n               <li>141 - Emotional Intelligence</li>\n               <li>142 - Mentoring</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>61 - Project Management</summary>\n              <ul>\n               <li>148 - Process Improvement</li>\n               <li>149 - Agile</li>\n               <li>150 - Prince</li>\n               <li>151 - PMBOK</li>\n               <li>152 - Project Management Finance</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>69 - Sales and Customer Service</summary>\n              <ul>\n               <li>27 - Sales</li>\n               <li>127 - Customer Service</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>70 - Time Management</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>64 - Technology Skills</summary>\n\n   + <details>\n            <summary>1 - Design and Animation</summary>\n              <ul>\n               <li>111 - Photography</li>\n               <li>112 - Animation</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>6 - Mobile App Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>7 - Gaming and Games Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>11 - Programming and Web Development</summary>\n              <ul>\n               <li>114 - Java</li>\n               <li>115 - Python</li>\n               <li>116 - C++</li>\n               <li>117 - SQL</li>\n               <li>118 - C#</li>\n               <li>119 - .NET</li>\n               <li>120 - Visual Basic</li>\n               <li>121 - HTML</li>\n               <li>122 - CSS</li>\n               <li>507 - Javascript</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>14 - Web Design and Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>17 - IT Software</summary>\n              <ul>\n               <li>110 - Microsoft Products. </li>\n              </ul>\n      </details>\n   + <details>\n            <summary>37 - Computer Science and Engineering</summary>\n              <ul>\n               <li>508 - Artificial Intelligence</li>\n               <li>509 - Machine Learning</li>\n               <li>510 - Blockchain</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>56 - \"Devops,Networking and Security\"</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>68 - Data & Analytics</summary>\n              <ul>\n               <li>113 - Data Science</li>\n               <li>472 - Big Data</li>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>63 - Safety and Compliance</summary>\n\n   + <details>\n            <summary>19 - Crisis Management</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>20 - Health and Safety</summary>\n              <ul>\n               <li>91 - First Aid</li>\n               <li>92 - Alcohol and Food safety</li>\n               <li>93 - Injury management</li>\n               <li>94 - Site Induction</li>\n               <li>95 - Hazardous Materials</li>\n               <li>96 - Driver Safety</li>\n               <li>97 - Fall Prevention</li>\n               <li>98 - Active Shooter</li>\n               <li>99 - Ergonomics</li>\n               <li>504 - Fire Safety</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>29 - HR Compliance</summary>\n              <ul>\n               <li>100 - Bullying</li>\n               <li>101 - Harassment</li>\n               <li>102 - Conflict Resolution</li>\n               <li>103 - Ethics</li>\n               <li>104 - Discrimination</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>33 - Financial Compliance</summary>\n              <ul>\n               <li>107 - Bribery and Corruption</li>\n               <li>108 - Anti</li>\n               <li>109 - KYC</li>\n               <li>505 - Fraud Prevention</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>36 - Data Compliance</summary>\n              <ul>\n               <li>105 - GDPR</li>\n               <li>106 - Privacy</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>59 - Compliance other</summary>\n              <ul>\n               <li>506 - Safeguarding</li>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>66 - Sector specific</summary>\n\n   + <details>\n            <summary>76 - Manufacturing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>77 - Construction</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>439 - Agriculture,Forestry and Fishing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>440 - Financial and Insurance Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>441 - Public Administration and Safety</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>442 - Education and Training</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>443 - Arts and Recreation Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>444 - Health Care and Social Assistance</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>445 - Accommodation and Food Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>446 - Mining</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>447 - Electricity,Gas,Water and Waste Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>448 - Rental,Hiring and Real Estate Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>449 - Information Media and Telecommunications</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>450 - Transport,Postal and Warehousing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>451 - Professional,Scientific and Technical Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>452 - Administrative and Support Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>453 - Retail and Wholesale Trade</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>454 - Other Services</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>21 - Personal Development</summary>\n\n   + <details>\n            <summary>5 - Audiovisual and Music</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>8 - Writing and Publishing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>12 - Language and Literature</summary>\n              <ul>\n               <li>512 - ESOL (US)</li>\n               <li>513 - ESOL (UK)</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>57 - Health and Well being</summary>\n              <ul>\n               <li>153 - Nutrition</li>\n               <li>154 - Yoga and Mindfullness</li>\n               <li>155 - Self Awareness</li>\n               <li>156 - Personal Transformation</li>\n               <li>157 - Stress Management</li>\n               <li>158 - Self Esteem</li>\n               <li>159 - Travel</li>\n               <li>514 - Mental Health Awareness</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>67 - General Personal Development</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            }
          },
          "entry_level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Dimension"
              }
            ],
            "description": "Level of experience needed to consume a particular learning content efficiently. Possible values are `489 - Intermediate`, `488 - beginner`, `490 - advanced`, `491 - Suitable for everyone`. For example if we want to set`entry_level` to `advanced` we need pass in `key = 490` and `value = advanced`"
          }
        },
        "required": [
          "mobile_optimised",
          "assessable",
          "wcag",
          "region_relevance",
          "learning_outcomes",
          "topics",
          "entry_level"
        ]
      },
      "CreateLinkLoAttributes": {
        "type": "object",
        "properties": {
          "year_created": {
            "type": "string",
            "description": "Year in which learning content was created",
            "example": 2021
          },
          "mobile_optimised": {
            "type": "boolean",
            "description": "Whether or not Learning content can be consumed through mobiles devices efficiently. Possible values `0` or `1`"
          },
          "accessable": {
            "type": "boolean",
            "description": "Whether or not Learning content is assessed. Possible values `0` or `1`"
          },
          "wcag": {
            "type": "boolean",
            "description": "Whether learning content is more accessible to a wide range of people with disabilities, including blindness and low vision, deafness and hearing loss, learning disabilities, cognitive limitations, limited movement, speech disabilities, photosensitivity and combinations of these. Possible values `0` or `1`"
          },
          "region_relevance": {
            "type": "array",
            "description": "Regions in which learning content is not restricted. If set to GLOBAL, it can be consumed through out the globe. Please see a full list of regions and their corresponding keys below. For example to set a region to `AU` you nee to pass `key` as `496`\n<details>\n\n  <summary>keys mapped to their regions</summary>\n      <ul>\n         <li>495 - GLOBAL</li>\n         <li>496 - AU</li>\n         <li>497 - US</li>\n         <li>498 - GB</li>\n         <li>499 - NZ</li>\n         <li>500 - MY</li>\n         <li>501 - ZA</li>\n         <li>515 - CA</li>\n         <li>516 - UAE</li>\n      </ul>\n</details>",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            }
          },
          "learning_outcomes": {
            "type": "array",
            "description": "Learning outcomes after consuming a particular learning content",
            "items": {
              "type": "string"
            }
          },
          "topics": {
            "minItems": 2,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "description": "\nTopics discussed in a particular learning content. They are categorized on three different levels `Level 1` , `Level 2` and `Level 3` topics. Each level is mapped to their corresponding descendent level in order to create topics tree internally.For example - `65 - Business Skills` is of `Level 1` and it's corresponding `Level 2` topic is `28 - Marketing` and `Level 3` topic `143 - Product Marketing` So inorder to create topics you should be passing keys `65, 28, 143`. Below is a full list of each `Level 1` topics mapped to their `Level 2` and `Level 3` topics. Note: You'll need pass at least two entries in order to create topics. For entries that don't have any descendent levels just pass `NULL`\n<details>\n  <summary>65 - Business Skills</summary>\n\n   + <details>\n            <summary>3 - Investment and Trading</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>4 - Industrial Skills</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>9 - Digital Marketing</summary>\n              <ul>\n               <li>128 - Search Engine Optimisation</li>\n               <li>129 - Social Media Marketing</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>15 - People and Communication Skills</summary>\n              <ul>\n               <li>160 - Business Writing</li>\n               <li>161 - Telephone Skills</li>\n               <li>162 - Presentation Skills</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>16 - Accounting and Finance</summary>\n              <ul>\n               <li>123 - Taxes</li>\n               <li>124 - Finance</li>\n               <li>125 - Accounting</li>\n               <li>126 - Auditing</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>25 - Entrepreneurship</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>26 - General Management</summary>\n              <ul>\n               <li>130 - Business Operations</li>\n               <li>131 - Business Strategy</li>\n               <li>132 - Change Management</li>\n               <li>511 - Remote Working</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>28 - Marketing</summary>\n              <ul>\n               <li>143 - Product Marketing</li>\n               <li>144 - Public relations</li>\n               <li>145 - Marketing Fundamentals</li>\n               <li>146 - Branding</li>\n               <li>147 - Social Media</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>30 - Legal</summary>\n              <ul>\n               <li>473 - CPD</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>32 - Human Resources</summary>\n              <ul>\n               <li>133 - Business ethics</li>\n               <li>134 - Human Resources Administration</li>\n               <li>135 - Change Management</li>\n               <li>136 - Hiring</li>\n               <li>137 - Diversity & Culture</li>\n               <li>138 - Performance Management</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>58 - Housing and Real Estate</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>60 - Leadership</summary>\n              <ul>\n               <li>139 - Team Building & Teamwork</li>\n               <li>140 - Negotiation</li>\n               <li>141 - Emotional Intelligence</li>\n               <li>142 - Mentoring</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>61 - Project Management</summary>\n              <ul>\n               <li>148 - Process Improvement</li>\n               <li>149 - Agile</li>\n               <li>150 - Prince</li>\n               <li>151 - PMBOK</li>\n               <li>152 - Project Management Finance</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>69 - Sales and Customer Service</summary>\n              <ul>\n               <li>27 - Sales</li>\n               <li>127 - Customer Service</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>70 - Time Management</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>64 - Technology Skills</summary>\n\n   + <details>\n            <summary>1 - Design and Animation</summary>\n              <ul>\n               <li>111 - Photography</li>\n               <li>112 - Animation</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>6 - Mobile App Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>7 - Gaming and Games Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>11 - Programming and Web Development</summary>\n              <ul>\n               <li>114 - Java</li>\n               <li>115 - Python</li>\n               <li>116 - C++</li>\n               <li>117 - SQL</li>\n               <li>118 - C#</li>\n               <li>119 - .NET</li>\n               <li>120 - Visual Basic</li>\n               <li>121 - HTML</li>\n               <li>122 - CSS</li>\n               <li>507 - Javascript</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>14 - Web Design and Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>17 - IT Software</summary>\n              <ul>\n               <li>110 - Microsoft Products. </li>\n              </ul>\n      </details>\n   + <details>\n            <summary>37 - Computer Science and Engineering</summary>\n              <ul>\n               <li>508 - Artificial Intelligence</li>\n               <li>509 - Machine Learning</li>\n               <li>510 - Blockchain</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>56 - \"Devops,Networking and Security\"</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>68 - Data & Analytics</summary>\n              <ul>\n               <li>113 - Data Science</li>\n               <li>472 - Big Data</li>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>63 - Safety and Compliance</summary>\n\n   + <details>\n            <summary>19 - Crisis Management</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>20 - Health and Safety</summary>\n              <ul>\n               <li>91 - First Aid</li>\n               <li>92 - Alcohol and Food safety</li>\n               <li>93 - Injury management</li>\n               <li>94 - Site Induction</li>\n               <li>95 - Hazardous Materials</li>\n               <li>96 - Driver Safety</li>\n               <li>97 - Fall Prevention</li>\n               <li>98 - Active Shooter</li>\n               <li>99 - Ergonomics</li>\n               <li>504 - Fire Safety</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>29 - HR Compliance</summary>\n              <ul>\n               <li>100 - Bullying</li>\n               <li>101 - Harassment</li>\n               <li>102 - Conflict Resolution</li>\n               <li>103 - Ethics</li>\n               <li>104 - Discrimination</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>33 - Financial Compliance</summary>\n              <ul>\n               <li>107 - Bribery and Corruption</li>\n               <li>108 - Anti</li>\n               <li>109 - KYC</li>\n               <li>505 - Fraud Prevention</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>36 - Data Compliance</summary>\n              <ul>\n               <li>105 - GDPR</li>\n               <li>106 - Privacy</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>59 - Compliance other</summary>\n              <ul>\n               <li>506 - Safeguarding</li>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>66 - Sector specific</summary>\n\n   + <details>\n            <summary>76 - Manufacturing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>77 - Construction</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>439 - Agriculture,Forestry and Fishing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>440 - Financial and Insurance Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>441 - Public Administration and Safety</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>442 - Education and Training</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>443 - Arts and Recreation Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>444 - Health Care and Social Assistance</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>445 - Accommodation and Food Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>446 - Mining</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>447 - Electricity,Gas,Water and Waste Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>448 - Rental,Hiring and Real Estate Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>449 - Information Media and Telecommunications</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>450 - Transport,Postal and Warehousing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>451 - Professional,Scientific and Technical Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>452 - Administrative and Support Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>453 - Retail and Wholesale Trade</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>454 - Other Services</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>21 - Personal Development</summary>\n\n   + <details>\n            <summary>5 - Audiovisual and Music</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>8 - Writing and Publishing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>12 - Language and Literature</summary>\n              <ul>\n               <li>512 - ESOL (US)</li>\n               <li>513 - ESOL (UK)</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>57 - Health and Well being</summary>\n              <ul>\n               <li>153 - Nutrition</li>\n               <li>154 - Yoga and Mindfullness</li>\n               <li>155 - Self Awareness</li>\n               <li>156 - Personal Transformation</li>\n               <li>157 - Stress Management</li>\n               <li>158 - Self Esteem</li>\n               <li>159 - Travel</li>\n               <li>514 - Mental Health Awareness</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>67 - General Personal Development</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n"
          },
          "entry_level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Dimension"
              }
            ],
            "description": "Level of experience needed to consume a particular learning content efficiently. Possible values are `489 - Intermediate`, `488 - beginner`, `490 - advanced`, `491 - Suitable for everyone`. For example if we want to set`entry_level` to `advanced` we need pass in `key = 490` and `value = advanced`"
          },
          "integration": {
            "type": "boolean",
            "description": "Whether or not learning content is integrated with other learning content. Possible values `true` or `false`"
          },
          "integration_url": {
            "type": "string",
            "description": "If `attributes.integration` is set to true, it will point to the integrated learning content"
          },
          "check_url": {
            "type": "string",
            "description": "a URL that will be polled when the content is being consumed"
          }
        },
        "required": [
          "mobile_optimised",
          "assessable",
          "wcag",
          "region_relevance",
          "learning_outcomes",
          "topics",
          "entry_level"
        ]
      },
      "CreateUpdateEnrolmentDto": {
        "type": "object",
        "properties": {
          "go1_account_id": {
            "type": "number",
            "nullable": false,
            "description": "User's account_id or user_id can create or update an enrolment. The account_id is the identifier of the user on a portal, while the user_id is the identifier of the user"
          },
          "source_id": {
            "type": "string",
            "nullable": false,
            "description": "A unique identifier assigned to the learning content by the caller when the learning content first gets created"
          },
          "status": {
            "type": "string",
            "nullable": false,
            "description": "Enrolment status",
            "example": ["in-progress", "completed"]
          },
          "result": {
            "type": "number",
            "nullable": false,
            "description": "Enrolment score result (0.0 to 1.0 corresponding to a score of 0-100%)",
            "minimum": 0,
            "maximum": 1
          },
          "pass": {
            "type": "boolean",
            "nullable": false,
            "description": "Enrolment pass or fail"
          },
          "start_date": {
            "type": "string",
            "nullable": false,
            "description": "Enrolment start date in ISO-8601 UTC time"
          },
          "end_date": {
            "type": "string",
            "nullable": true,
            "description": "Enrolment end date in ISO-8601 UTC time"
          }
        },
        "required": [
          "go1_account_id",
          "source_id",
          "status",
          "result",
          "pass",
          "start_date"
        ]
      },
      "PatchLoAttributes": {
        "type": "object",
        "properties": {
          "year_created": {
            "type": "string",
            "description": "Year in which learning content was created",
            "example": 2021
          },
          "mobile_optimised": {
            "type": "boolean",
            "description": "Whether or not Learning content can be consumed through mobiles devices efficiently. Possible values `0` or `1`"
          },
          "assessable": {
            "type": "boolean",
            "description": "Whether or not Learning content is assessed. Possible values `0` or `1`"
          },
          "wcag": {
            "type": "boolean",
            "description": "Whether learning content is more accessible to a wide range of people with disabilities, including blindness and low vision, deafness and hearing loss, learning disabilities, cognitive limitations, limited movement, speech disabilities, photosensitivity and combinations of these. Possible values `0` or `1`"
          },
          "region_relevance": {
            "type": "array",
            "description": "Regions in which learning content is not restricted. If set to GLOBAL, it can be consumed through out the globe. Please see a full list of regions and their corresponding keys below. For example to set a region to `AU` you nee to pass `key` as `496`\n<details>\n\n  <summary>keys mapped to their regions</summary>\n      <ul>\n         <li>495 - GLOBAL</li>\n         <li>496 - AU</li>\n         <li>497 - US</li>\n         <li>498 - GB</li>\n         <li>499 - NZ</li>\n         <li>500 - MY</li>\n         <li>501 - ZA</li>\n         <li>515 - CA</li>\n         <li>516 - UAE</li>\n      </ul>\n</details>",
            "items": {
              "$ref": "#/components/schemas/SimpleDimension"
            }
          },
          "learning_outcomes": {
            "type": "array",
            "description": "Learning outcomes after consuming a particular learning content",
            "items": {
              "type": "string"
            }
          },
          "topics": {
            "minItems": 2,
            "type": "array",
            "description": "\nTopics discussed in a particular learning content. They are categorized on three different levels `Level 1` , `Level 2` and `Level 3` topics. Each level is mapped to their corresponding descendent level in order to create topics tree internally.For example - `65 - Business Skills` is of `Level 1` and it's corresponding `Level 2` topic is `28 - Marketing` and `Level 3` topic `143 - Product Marketing` So inorder to create topics you should be passing keys `65, 28, 143`. Below is a full list of each `Level 1` topics mapped to their `Level 2` and `Level 3` topics. Note: You'll need pass at least two entries in order to create topics. For entries that don't have any descendent levels just pass `NULL`\n<details>\n  <summary>65 - Business Skills</summary>\n\n   + <details>\n            <summary>3 - Investment and Trading</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>4 - Industrial Skills</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>9 - Digital Marketing</summary>\n              <ul>\n               <li>128 - Search Engine Optimisation</li>\n               <li>129 - Social Media Marketing</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>15 - People and Communication Skills</summary>\n              <ul>\n               <li>160 - Business Writing</li>\n               <li>161 - Telephone Skills</li>\n               <li>162 - Presentation Skills</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>16 - Accounting and Finance</summary>\n              <ul>\n               <li>123 - Taxes</li>\n               <li>124 - Finance</li>\n               <li>125 - Accounting</li>\n               <li>126 - Auditing</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>25 - Entrepreneurship</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>26 - General Management</summary>\n              <ul>\n               <li>130 - Business Operations</li>\n               <li>131 - Business Strategy</li>\n               <li>132 - Change Management</li>\n               <li>511 - Remote Working</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>28 - Marketing</summary>\n              <ul>\n               <li>143 - Product Marketing</li>\n               <li>144 - Public relations</li>\n               <li>145 - Marketing Fundamentals</li>\n               <li>146 - Branding</li>\n               <li>147 - Social Media</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>30 - Legal</summary>\n              <ul>\n               <li>473 - CPD</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>32 - Human Resources</summary>\n              <ul>\n               <li>133 - Business ethics</li>\n               <li>134 - Human Resources Administration</li>\n               <li>135 - Change Management</li>\n               <li>136 - Hiring</li>\n               <li>137 - Diversity & Culture</li>\n               <li>138 - Performance Management</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>58 - Housing and Real Estate</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>60 - Leadership</summary>\n              <ul>\n               <li>139 - Team Building & Teamwork</li>\n               <li>140 - Negotiation</li>\n               <li>141 - Emotional Intelligence</li>\n               <li>142 - Mentoring</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>61 - Project Management</summary>\n              <ul>\n               <li>148 - Process Improvement</li>\n               <li>149 - Agile</li>\n               <li>150 - Prince</li>\n               <li>151 - PMBOK</li>\n               <li>152 - Project Management Finance</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>69 - Sales and Customer Service</summary>\n              <ul>\n               <li>27 - Sales</li>\n               <li>127 - Customer Service</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>70 - Time Management</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>64 - Technology Skills</summary>\n\n   + <details>\n            <summary>1 - Design and Animation</summary>\n              <ul>\n               <li>111 - Photography</li>\n               <li>112 - Animation</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>6 - Mobile App Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>7 - Gaming and Games Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>11 - Programming and Web Development</summary>\n              <ul>\n               <li>114 - Java</li>\n               <li>115 - Python</li>\n               <li>116 - C++</li>\n               <li>117 - SQL</li>\n               <li>118 - C#</li>\n               <li>119 - .NET</li>\n               <li>120 - Visual Basic</li>\n               <li>121 - HTML</li>\n               <li>122 - CSS</li>\n               <li>507 - Javascript</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>14 - Web Design and Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>17 - IT Software</summary>\n              <ul>\n               <li>110 - Microsoft Products. </li>\n              </ul>\n      </details>\n   + <details>\n            <summary>37 - Computer Science and Engineering</summary>\n              <ul>\n               <li>508 - Artificial Intelligence</li>\n               <li>509 - Machine Learning</li>\n               <li>510 - Blockchain</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>56 - \"Devops,Networking and Security\"</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>68 - Data & Analytics</summary>\n              <ul>\n               <li>113 - Data Science</li>\n               <li>472 - Big Data</li>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>63 - Safety and Compliance</summary>\n\n   + <details>\n            <summary>19 - Crisis Management</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>20 - Health and Safety</summary>\n              <ul>\n               <li>91 - First Aid</li>\n               <li>92 - Alcohol and Food safety</li>\n               <li>93 - Injury management</li>\n               <li>94 - Site Induction</li>\n               <li>95 - Hazardous Materials</li>\n               <li>96 - Driver Safety</li>\n               <li>97 - Fall Prevention</li>\n               <li>98 - Active Shooter</li>\n               <li>99 - Ergonomics</li>\n               <li>504 - Fire Safety</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>29 - HR Compliance</summary>\n              <ul>\n               <li>100 - Bullying</li>\n               <li>101 - Harassment</li>\n               <li>102 - Conflict Resolution</li>\n               <li>103 - Ethics</li>\n               <li>104 - Discrimination</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>33 - Financial Compliance</summary>\n              <ul>\n               <li>107 - Bribery and Corruption</li>\n               <li>108 - Anti</li>\n               <li>109 - KYC</li>\n               <li>505 - Fraud Prevention</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>36 - Data Compliance</summary>\n              <ul>\n               <li>105 - GDPR</li>\n               <li>106 - Privacy</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>59 - Compliance other</summary>\n              <ul>\n               <li>506 - Safeguarding</li>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>66 - Sector specific</summary>\n\n   + <details>\n            <summary>76 - Manufacturing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>77 - Construction</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>439 - Agriculture,Forestry and Fishing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>440 - Financial and Insurance Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>441 - Public Administration and Safety</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>442 - Education and Training</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>443 - Arts and Recreation Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>444 - Health Care and Social Assistance</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>445 - Accommodation and Food Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>446 - Mining</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>447 - Electricity,Gas,Water and Waste Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>448 - Rental,Hiring and Real Estate Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>449 - Information Media and Telecommunications</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>450 - Transport,Postal and Warehousing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>451 - Professional,Scientific and Technical Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>452 - Administrative and Support Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>453 - Retail and Wholesale Trade</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>454 - Other Services</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>21 - Personal Development</summary>\n\n   + <details>\n            <summary>5 - Audiovisual and Music</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>8 - Writing and Publishing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>12 - Language and Literature</summary>\n              <ul>\n               <li>512 - ESOL (US)</li>\n               <li>513 - ESOL (UK)</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>57 - Health and Well being</summary>\n              <ul>\n               <li>153 - Nutrition</li>\n               <li>154 - Yoga and Mindfullness</li>\n               <li>155 - Self Awareness</li>\n               <li>156 - Personal Transformation</li>\n               <li>157 - Stress Management</li>\n               <li>158 - Self Esteem</li>\n               <li>159 - Travel</li>\n               <li>514 - Mental Health Awareness</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>67 - General Personal Development</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n",
            "items": {
              "$ref": "#/components/schemas/SimpleDimension"
            }
          },
          "entry_level": {
            "description": "Level of experience needed to consume a particular learning content efficiently. Possible values are `489 - Intermediate`, `488 - beginner`, `490 - advanced`, `491 - Suitable for everyone`. For example if we want to set`entry_level` to `advanced` we need pass in `key = 490` and `value = advanced`",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleDimension"
              }
            ]
          }
        }
      },
      "PatchLinkLoAttributes": {
        "type": "object",
        "properties": {
          "year_created": {
            "type": "string",
            "description": "Year in which learning content was created",
            "example": 2021
          },
          "mobile_optimised": {
            "type": "boolean",
            "description": "Whether or not Learning content can be consumed through mobiles devices efficiently. Possible values `0` or `1`"
          },
          "assessable": {
            "type": "boolean",
            "description": "Whether or not Learning content is assessed. Possible values `0` or `1`"
          },
          "wcag": {
            "type": "boolean",
            "description": "Whether learning content is more accessible to a wide range of people with disabilities, including blindness and low vision, deafness and hearing loss, learning disabilities, cognitive limitations, limited movement, speech disabilities, photosensitivity and combinations of these. Possible values `0` or `1`"
          },
          "region_relevance": {
            "type": "array",
            "description": "Regions in which learning content is not restricted. If set to GLOBAL, it can be consumed through out the globe. Please see a full list of regions and their corresponding keys below. For example to set a region to `AU` you nee to pass `key` as `496`\n<details>\n\n  <summary>keys mapped to their regions</summary>\n      <ul>\n         <li>495 - GLOBAL</li>\n         <li>496 - AU</li>\n         <li>497 - US</li>\n         <li>498 - GB</li>\n         <li>499 - NZ</li>\n         <li>500 - MY</li>\n         <li>501 - ZA</li>\n         <li>515 - CA</li>\n         <li>516 - UAE</li>\n      </ul>\n</details>",
            "items": {
              "$ref": "#/components/schemas/SimpleDimension"
            }
          },
          "learning_outcomes": {
            "type": "array",
            "description": "Learning outcomes after consuming a particular learning content",
            "items": {
              "type": "string"
            }
          },
          "topics": {
            "minItems": 2,
            "type": "array",
            "description": "\nTopics discussed in a particular learning content. They are categorized on three different levels `Level 1` , `Level 2` and `Level 3` topics. Each level is mapped to their corresponding descendent level in order to create topics tree internally.For example - `65 - Business Skills` is of `Level 1` and it's corresponding `Level 2` topic is `28 - Marketing` and `Level 3` topic `143 - Product Marketing` So inorder to create topics you should be passing keys `65, 28, 143`. Below is a full list of each `Level 1` topics mapped to their `Level 2` and `Level 3` topics. Note: You'll need pass at least two entries in order to create topics. For entries that don't have any descendent levels just pass `NULL`\n<details>\n  <summary>65 - Business Skills</summary>\n\n   + <details>\n            <summary>3 - Investment and Trading</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>4 - Industrial Skills</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>9 - Digital Marketing</summary>\n              <ul>\n               <li>128 - Search Engine Optimisation</li>\n               <li>129 - Social Media Marketing</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>15 - People and Communication Skills</summary>\n              <ul>\n               <li>160 - Business Writing</li>\n               <li>161 - Telephone Skills</li>\n               <li>162 - Presentation Skills</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>16 - Accounting and Finance</summary>\n              <ul>\n               <li>123 - Taxes</li>\n               <li>124 - Finance</li>\n               <li>125 - Accounting</li>\n               <li>126 - Auditing</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>25 - Entrepreneurship</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>26 - General Management</summary>\n              <ul>\n               <li>130 - Business Operations</li>\n               <li>131 - Business Strategy</li>\n               <li>132 - Change Management</li>\n               <li>511 - Remote Working</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>28 - Marketing</summary>\n              <ul>\n               <li>143 - Product Marketing</li>\n               <li>144 - Public relations</li>\n               <li>145 - Marketing Fundamentals</li>\n               <li>146 - Branding</li>\n               <li>147 - Social Media</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>30 - Legal</summary>\n              <ul>\n               <li>473 - CPD</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>32 - Human Resources</summary>\n              <ul>\n               <li>133 - Business ethics</li>\n               <li>134 - Human Resources Administration</li>\n               <li>135 - Change Management</li>\n               <li>136 - Hiring</li>\n               <li>137 - Diversity & Culture</li>\n               <li>138 - Performance Management</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>58 - Housing and Real Estate</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>60 - Leadership</summary>\n              <ul>\n               <li>139 - Team Building & Teamwork</li>\n               <li>140 - Negotiation</li>\n               <li>141 - Emotional Intelligence</li>\n               <li>142 - Mentoring</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>61 - Project Management</summary>\n              <ul>\n               <li>148 - Process Improvement</li>\n               <li>149 - Agile</li>\n               <li>150 - Prince</li>\n               <li>151 - PMBOK</li>\n               <li>152 - Project Management Finance</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>69 - Sales and Customer Service</summary>\n              <ul>\n               <li>27 - Sales</li>\n               <li>127 - Customer Service</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>70 - Time Management</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>64 - Technology Skills</summary>\n\n   + <details>\n            <summary>1 - Design and Animation</summary>\n              <ul>\n               <li>111 - Photography</li>\n               <li>112 - Animation</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>6 - Mobile App Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>7 - Gaming and Games Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>11 - Programming and Web Development</summary>\n              <ul>\n               <li>114 - Java</li>\n               <li>115 - Python</li>\n               <li>116 - C++</li>\n               <li>117 - SQL</li>\n               <li>118 - C#</li>\n               <li>119 - .NET</li>\n               <li>120 - Visual Basic</li>\n               <li>121 - HTML</li>\n               <li>122 - CSS</li>\n               <li>507 - Javascript</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>14 - Web Design and Development</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>17 - IT Software</summary>\n              <ul>\n               <li>110 - Microsoft Products. </li>\n              </ul>\n      </details>\n   + <details>\n            <summary>37 - Computer Science and Engineering</summary>\n              <ul>\n               <li>508 - Artificial Intelligence</li>\n               <li>509 - Machine Learning</li>\n               <li>510 - Blockchain</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>56 - \"Devops,Networking and Security\"</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>68 - Data & Analytics</summary>\n              <ul>\n               <li>113 - Data Science</li>\n               <li>472 - Big Data</li>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>63 - Safety and Compliance</summary>\n\n   + <details>\n            <summary>19 - Crisis Management</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>20 - Health and Safety</summary>\n              <ul>\n               <li>91 - First Aid</li>\n               <li>92 - Alcohol and Food safety</li>\n               <li>93 - Injury management</li>\n               <li>94 - Site Induction</li>\n               <li>95 - Hazardous Materials</li>\n               <li>96 - Driver Safety</li>\n               <li>97 - Fall Prevention</li>\n               <li>98 - Active Shooter</li>\n               <li>99 - Ergonomics</li>\n               <li>504 - Fire Safety</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>29 - HR Compliance</summary>\n              <ul>\n               <li>100 - Bullying</li>\n               <li>101 - Harassment</li>\n               <li>102 - Conflict Resolution</li>\n               <li>103 - Ethics</li>\n               <li>104 - Discrimination</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>33 - Financial Compliance</summary>\n              <ul>\n               <li>107 - Bribery and Corruption</li>\n               <li>108 - Anti</li>\n               <li>109 - KYC</li>\n               <li>505 - Fraud Prevention</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>36 - Data Compliance</summary>\n              <ul>\n               <li>105 - GDPR</li>\n               <li>106 - Privacy</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>59 - Compliance other</summary>\n              <ul>\n               <li>506 - Safeguarding</li>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>66 - Sector specific</summary>\n\n   + <details>\n            <summary>76 - Manufacturing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>77 - Construction</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>439 - Agriculture,Forestry and Fishing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>440 - Financial and Insurance Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>441 - Public Administration and Safety</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>442 - Education and Training</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>443 - Arts and Recreation Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>444 - Health Care and Social Assistance</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>445 - Accommodation and Food Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>446 - Mining</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>447 - Electricity,Gas,Water and Waste Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>448 - Rental,Hiring and Real Estate Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>449 - Information Media and Telecommunications</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>450 - Transport,Postal and Warehousing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>451 - Professional,Scientific and Technical Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>452 - Administrative and Support Services</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>453 - Retail and Wholesale Trade</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>454 - Other Services</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n<details>\n  <summary>21 - Personal Development</summary>\n\n   + <details>\n            <summary>5 - Audiovisual and Music</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>8 - Writing and Publishing</summary>\n              <ul>\n              </ul>\n      </details>\n   + <details>\n            <summary>12 - Language and Literature</summary>\n              <ul>\n               <li>512 - ESOL (US)</li>\n               <li>513 - ESOL (UK)</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>57 - Health and Well being</summary>\n              <ul>\n               <li>153 - Nutrition</li>\n               <li>154 - Yoga and Mindfullness</li>\n               <li>155 - Self Awareness</li>\n               <li>156 - Personal Transformation</li>\n               <li>157 - Stress Management</li>\n               <li>158 - Self Esteem</li>\n               <li>159 - Travel</li>\n               <li>514 - Mental Health Awareness</li>\n              </ul>\n      </details>\n   + <details>\n            <summary>67 - General Personal Development</summary>\n              <ul>\n              </ul>\n      </details>\n</details>\n\n",
            "items": {
              "$ref": "#/components/schemas/SimpleDimension"
            }
          },
          "entry_level": {
            "description": "Level of experience needed to consume a particular learning content efficiently. Possible values are `489 - Intermediate`, `488 - beginner`, `490 - advanced`, `491 - Suitable for everyone`. For example if we want to set`entry_level` to `advanced` we need pass in `key = 490` and `value = advanced`",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleDimension"
              }
            ]
          },
          "integration": {
            "type": "boolean",
            "description": "Whether or not learning content is integrated with other learning content. Possible values `true` or `false`"
          },
          "integration_url": {
            "type": "string",
            "description": "If `attributes.integration` is set to true, it will point to the integrated learning content"
          },
          "check_url": {
            "type": "string",
            "description": "a URL that will be polled when the content is being consumed"
          }
        }
      },
      "CreateLearningObjectResponse": {
        "type": "object",
        "properties": {
          "can_mark_as_complete": {
            "type": "boolean",
            "description": "Whether or not a learning content can be marked as complete by a user without completing it"
          },
          "id": {
            "type": "number",
            "description": "The internal identification number of the learning content"
          },
          "title": {
            "type": "string",
            "description": "Title of the learning content"
          },
          "type": {
            "type": "string",
            "description": "Type of learning content",
            "example": "link, document, video, interactive, text, etc"
          },
          "description": {
            "type": "string",
            "description": "Description of learning content"
          },
          "source_id": {
            "type": "string",
            "description": "A unique identifier assigned to the learning content by the caller when the learning content first gets created"
          },
          "authentication_type": {
            "type": "string",
            "description": "Type of authentication used to get info about a learning content. Default is 'none'",
            "example": "SAML, none"
          },
          "instance": {
            "type": "number",
            "description": "Portal to which learning content belongs"
          },
          "published": {
            "type": "boolean",
            "description": "Whether or not a learning content is available to other portals or not"
          },
          "url": {
            "type": "string",
            "description": "Url pointing to the learning content. This field is ignored & optional when attributes.integration is set to true. Required when attributes.integration is false."
          },
          "image": {
            "type": "string",
            "description": "Placeholder image url for learning content"
          },
          "language": {
            "type": "string",
            "description": "Language in which learning content can be consumed. For example - spanish, german etc, according to [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
            "example": "en"
          },
          "premium": {
            "type": "boolean",
            "description": "Flag to make the LO available on Premium"
          },
          "marketplace": {
            "type": "string",
            "description": "Flag to make the LO available on Marketplace"
          },
          "decommission_at": {
            "format": "date-time",
            "type": "string",
            "description": "A valid ISO date relative to and less than the retire_at date for which no new enrolments are accepted"
          },
          "retire_at": {
            "format": "date-time",
            "type": "string",
            "description": "A valid ISO date which tells when this learning content is to be removed from the portal"
          },
          "can_embed": {
            "type": "boolean",
            "description": "Flag to load the content in a new window or an iframe"
          },
          "duration": {
            "type": "number",
            "description": "Total duration of the learning content"
          },
          "pricing": {
            "$ref": "#/components/schemas/LoPricing"
          },
          "attributes": {
            "description": "Attributes containing auxiliary metadata about learning content",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateLinkLoAttributes"
              }
            ]
          },
          "summary": {
            "type": "string",
            "description": "Summary of the learning content"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the learning content i.e giving high level overview of the content"
          },
          "import_status": {
            "type": "string",
            "description": "Import status of learning content",
            "example": "ready, pending, failed"
          },
          "import_message": {
            "type": "string",
            "description": "Info about import status of learning content"
          }
        },
        "required": [
          "id",
          "title",
          "type",
          "description",
          "source_id",
          "authentication_type",
          "instance",
          "published",
          "url",
          "image",
          "language",
          "premium",
          "marketplace",
          "decommission_at",
          "retire_at",
          "can_embed",
          "duration",
          "pricing",
          "attributes",
          "summary",
          "tags",
          "import_status",
          "import_message"
        ]
      },
      "PatchLearningObjectResponse": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Attributes containing auxiliary metadata about learning content",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PatchLinkLoAttributes"
              }
            ]
          },
          "authentication_type": {
            "type": "string",
            "description": "Type of authentication used to get info about a learning content. Default is 'none'",
            "example": "SAML, none"
          },
          "can_embed": {
            "type": "boolean",
            "description": "Flag to load the content in a new window or an iframe"
          },
          "can_mark_as_complete": {
            "type": "boolean",
            "description": "Whether or not a learning content can be marked as complete by a user without completing it"
          },
          "decommission_at": {
            "format": "date-time",
            "type": "string",
            "description": "A valid ISO date relative to and less than the retire_at date for which no new enrolments are accepted"
          },
          "description": {
            "type": "string",
            "description": "Description of learning content"
          },
          "duration": {
            "type": "number",
            "description": "Total duration of the learning content"
          },
          "id": {
            "type": "number",
            "description": "The internal identification number of the learning content"
          },
          "image": {
            "type": "string",
            "description": "Placeholder image url for learning content"
          },
          "import_message": {
            "type": "string",
            "description": "Info about import status of learning content"
          },
          "import_status": {
            "type": "string",
            "description": "Import status of learning content",
            "example": "ready, pending, failed"
          },
          "instance": {
            "type": "number",
            "description": "Portal to which learning content belongs"
          },
          "language": {
            "type": "string",
            "description": "Language in which learning content can be consumed. For example - spanish, german etc, according to [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
            "example": "en"
          },
          "marketplace": {
            "type": "string",
            "description": "Flag to make the LO available on Marketplace"
          },
          "premium": {
            "type": "boolean",
            "description": "Flag to make the LO available on Premium"
          },
          "pricing": {
            "description": "Pricing of the learning content",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoPricing"
              }
            ]
          },
          "published": {
            "type": "boolean",
            "description": "Whether or not a learning content is available to other portals or not"
          },
          "retire_at": {
            "format": "date-time",
            "type": "string",
            "description": "A valid ISO date which tells when this learning content is to be removed from the portal"
          },
          "summary": {
            "type": "string",
            "description": "Summary of the learning content"
          },
          "source_id": {
            "type": "string",
            "description": "A unique identifier assigned to the learning content by the caller when the learning content first gets created"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the learning content i.e giving high level overview of the content"
          },
          "title": {
            "type": "string",
            "description": "Title of the learning content"
          },
          "type": {
            "type": "string",
            "description": "Type of learning content",
            "example": "link, document, video, interactive, text, etc"
          },
          "url": {
            "type": "string",
            "description": "Url pointing to the learning content. This field is ignored & optional when attributes.integration is set to true. Required when attributes.integration is false."
          }
        },
        "required": [
          "id",
          "title",
          "type",
          "description",
          "source_id",
          "authentication_type",
          "instance",
          "published",
          "url",
          "image",
          "language",
          "premium",
          "marketplace",
          "decommission_at",
          "retire_at",
          "can_embed",
          "duration",
          "pricing",
          "summary",
          "tags",
          "import_status",
          "import_message",
          "attributes"
        ]
      }
    },
    "parameters": {
      "collection-id": {
        "name": "collection-id",
        "in": "path",
        "description": "The collection identifier number, or the string `default`.\n",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "enrollment-id": {
        "name": "enrollment-id",
        "in": "path",
        "description": "The enrollment id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "min_enrollment_count": {
        "name": "min_enrollment_count",
        "in": "query",
        "description": "The minimum enrollment count a learning object needs to have",
        "schema": {
          "type": "integer"
        }
      },
      "enrollment-status": {
        "name": "status",
        "in": "query",
        "description": "Fiter by one or multiple enrollment statuses.\n\nFormat: `status=value[,value...]`\n\n#### Examples\n* `status=completed` will only return completed enrollments\n* `status=not-started,in-progress` will only return enrollments that either have not been started or are in progress\n",
        "schema": {
          "type": "string",
          "enum": ["completed", "in-progress", "not-started", "assigned"]
        }
      },
      "enrollment-include": {
        "name": "include",
        "in": "query",
        "description": "Request additional data in the response.\n\nFormat: `include=value[,value...]`\n\n#### Example\n* `include=lo` will return additional data about the learning object the user (was) enrolled in\n",
        "schema": {
          "type": "string",
          "enum": ["lo"]
        }
      },
      "enrollment-lo-ids": {
        "name": "lo_ids",
        "in": "query",
        "description": "Filter by learning object ID(s).\n\nFormat: `lo_ids=value[,value...]`\n",
        "schema": {
          "type": "string"
        }
      },
      "enrollment-user-id": {
        "name": "user_id",
        "in": "query",
        "description": "Filter by user ID.\nIf this parameter is not present, the authenticated user must be a portal administrator.\n",
        "schema": {
          "type": "integer"
        }
      },
      "enrollment-updated": {
        "name": "updated",
        "in": "query",
        "description": "Filter by changed timestamp so that only enrolments that are greater than or equal to are retrieved.\n\nExample: `1531785600`\n",
        "schema": {
          "type": "number"
        }
      },
      "learning-object-collection": {
        "name": "collection",
        "in": "query",
        "description": "Filter by collection.",
        "schema": {
          "type": "string",
          "enum": ["default"]
        }
      },
      "learning-object-content-group": {
        "name": "content_group[]",
        "in": "query",
        "description": "Filter by content group",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "learning-object-country": {
        "name": "location[country][]",
        "in": "query",
        "description": "Only request learning objects that have one or more events that take place in a specific country.\n\nAccepts two-letter [ISO 3166-1 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for countries in uppercase.\n\nExample: `AU`\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "learning-object-event": {
        "name": "event",
        "in": "query",
        "description": "Filter learning objects based on their events.\n\nAvailable values:\n* `true`: Only return learning objects with events.\n* `false`: Only return learning objects without events.\n* `all`: Return learning objects both with and without events.\n",
        "schema": {
          "type": "string",
          "enum": ["true", "false", "all"]
        }
      },
      "learning-object-event-start": {
        "name": "eventStartDate",
        "in": "query",
        "description": "Event start date in Unix timestamp format. Use to filter for learning objects with events starting at a specific time and date.\n\nExample: `1531785600`\n",
        "schema": {
          "type": "number"
        }
      },
      "learning-object-event-end": {
        "name": "eventEndDate",
        "in": "query",
        "description": "Event end date in Unix timestamp format. Use to filter for learning objects with events ending at a specific time and date.\n\nExample: `1531872000`\n",
        "schema": {
          "type": "number"
        }
      },
      "learning-object-facets": {
        "name": "facets",
        "in": "query",
        "description": "Search facets to be returned.\n\nFormat: `facets=facet[,facet...]`\n\n#### Examples\n* `facets=language` -- the response will include a `facets` object containing a `language` object with information about the possible languages to filter on.\n* `facets=instance,tag` -- the response will include a `facets` object containing an `instance` object with information about the possible instances to filter on, and a `tag` object with information about the possible tags to filter on.\n",
        "schema": {
          "type": "string",
          "enum": ["instance", "language", "tag", "content_group", "topics"]
        }
      },
      "learning-object-id": {
        "name": "lo-id",
        "in": "path",
        "description": "Learning object ID.",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "learning-object-ids": {
        "name": "lo_ids[]",
        "in": "query",
        "description": "Learning object IDs.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "learning-object-keyword": {
        "name": "keyword",
        "in": "query",
        "description": "Search keyword.",
        "schema": {
          "type": "string"
        }
      },
      "learning-object-language": {
        "name": "language[]",
        "in": "query",
        "description": "Filter by language (and optionally locale).\n\nAccepts two-letter [ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for languages in lowercase, and optionally two-letter [ISO 3166-1 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for countries in lowercase, separated by a hyphen.\n\n#### Examples\n* `language[]=hu` -- Only return learning objects whose language is Hungarian.\n* `language[]=en-gb` -- Only return learning objects whose language is English (United Kingdom).\n* `language[]=es&language[]=sv` -- Only return learning objects whose language is Spanish or Swedish.\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "learning-object-locale": {
        "name": "locale[]",
        "in": "query",
        "description": "#### DEPRECATED\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "learning-object-locality": {
        "name": "location[locality][]",
        "in": "query",
        "description": "Only request learning objects that have one or more events that take place in a specific town.\n\nExample: `Brisbane`\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "learning-object-price-max": {
        "name": "price[max]",
        "in": "query",
        "description": "Filter by maximum price. Will return learning objects with the specified\nprice or lower.\n\nThe value can be an integer or a floating-point number.\n",
        "schema": {
          "type": "number"
        }
      },
      "learning-object-price-min": {
        "name": "price[min]",
        "in": "query",
        "description": "Filter by minimum price. Will return learning objects with the specified\nprice or higher.\n\nThe value can be an integer or a floating-point number.\n",
        "schema": {
          "type": "number"
        }
      },
      "learning-object-duration-max": {
        "name": "duration[max]",
        "in": "query",
        "description": "Filter by maximum duration in minutes. Will return learning objects with the specified\nduration or lower.\n",
        "schema": {
          "type": "number"
        }
      },
      "learning-object-duration-min": {
        "name": "duration[min]",
        "in": "query",
        "description": "Filter by minimum duration in minutes. Will return learning objects with the specified\nduration or higher.\n",
        "schema": {
          "type": "number"
        }
      },
      "learning-object-providers": {
        "name": "providers",
        "in": "query",
        "description": "Filter by provider ID(s).\n\nTo retrieve provider IDs, first use a `?facets[]=instance&limit=0` query, and use the `$.facets.instance.buckets[*].key` values from the response.\n\n#### Examples\n* `providers=150` will return learning objects provided by provider `#150`\n* `providers=150,2000` will return learning objects provided by either provider `#150` or provider `#2000`\n",
        "schema": {
          "type": "string"
        }
      },
      "learning-object-provider": {
        "name": "provider[]",
        "in": "query",
        "description": "#### DEPRECATED\nSee `providers`.\n\n#### Examples\n* `provider[]=150` will return learning objects provided by provider `#150`\n* `provider[]=150&provider[]=2000` will return learning objects provided by either provider `#150` or provider `#2000`\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "learning-object-sort": {
        "name": "sort",
        "in": "query",
        "description": "Sort learning objects by one or more properties.\n\nFormat: `sort=key[:direction][,key[:direction]...]`\n\nAvailable sorting options:\n* `created`\n* `popularity`\n* `price`\n* `relevance`\n* `title`\n\n#### Examples\n* `sort=popularity` will sort by popularity, showing least popular learning objects first (since no direction is specified)\n* `sort=created:desc` will sort by creation date, showing most recent learning objects first\n* `sort=price:desc,title` will sort learning objects first by price in descending order, then by title in ascending order (since no direction is specified)\n",
        "schema": {
          "type": "string",
          "default": "title",
          "enum": ["created", "popularity", "price", "relevance", "title"]
        }
      },
      "learning-object-subscribed": {
        "name": "subscribed",
        "in": "query",
        "description": "Filter by subscribed content.\n\nAvailable values:\n* `true`: Only return learning objects subscribed to.\n* `false`: Only return learning objects not subscribed to.\n",
        "schema": {
          "type": "boolean"
        }
      },
      "learning-object-premium": {
        "name": "premium",
        "in": "query",
        "description": "Filter by premium content.\n\nAvailable values:\n* `true`: Attach any premium content to the result set.\n* `false`: Does not do any attaching of extra content. This is the Default.\n",
        "schema": {
          "type": "boolean"
        }
      },
      "learning-object-tags": {
        "name": "tags[]",
        "in": "query",
        "description": "Filter by content tag(s).\n\n#### Usage\nUse the textual representation of the tags (not tag IDs).\n\n#### Examples\n* `tags[]=Agile` will only return learning objects that are tagged with `Agile`\n* `tags[]=Agile&tags[]=Business Skills` will return learning objects that are tagged with `Agile`, `Business Skills`, or both\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "learning-object-id-filter": {
        "name": "id[]",
        "in": "query",
        "description": "Filter by Learning Object ID\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "learning-object-thoroughfare": {
        "name": "location[thoroughfare][]",
        "in": "query",
        "description": "Only request learning objects that have one or more events that take place at a specific address.\n\nExample: `64 Adelaide Street`\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "learning-object-type": {
        "name": "type",
        "in": "query",
        "description": "Fiter by one or multiple learning object types.\n\nFormat: `type=value[,value...]`\n\n#### Examples\n* `type=course` will only return courses\n* `type=learning_resource` will only return standalone learning resources, which are not part of any course or module (but not courses)\n* `type=course,video` will only return courses and videos\n",
        "schema": {
          "type": "string",
          "enum": [
            "assignment",
            "award",
            "course",
            "document",
            "event",
            "integration",
            "interactive",
            "lti",
            "question",
            "quiz",
            "text",
            "video"
          ]
        }
      },
      "learning-object-topics": {
        "name": "topics[]",
        "in": "query",
        "description": "Filter by one or more topics",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Number of items to return. Maximum value is 50. Each endpoint has a default limit where applicable, so passing in\na value is recommended.\n",
        "schema": {
          "type": "integer"
        }
      },
      "role": {
        "name": "role",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "skill": {
        "name": "skill",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Offset to start paging from. Offset + limit must not exceed 10,000.",
        "schema": {
          "type": "integer"
        }
      },
      "user-id": {
        "name": "user-id",
        "in": "path",
        "description": "User identifier number.",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "webhook-id": {
        "name": "webhook-id",
        "in": "path",
        "description": "Webhook identifier number.",
        "required": true,
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.go1.com/oauth/authorize",
            "tokenUrl": "https://auth.go1.com/oauth/token",
            "scopes": {
              "account.read": "Read account information",
              "enrollment.read": "Read enrollment data",
              "enrollment.write": "Manage enrollments",
              "lo.read": "Access content",
              "lo.write": "Manage content",
              "portal.read": "Read portal configuration",
              "portal.write": "Manage portal configuration",
              "user.login": "Create login link for the platform for other users",
              "user.login.me": "Create login link for the platform for the authenticated user",
              "user.read": "Read user data",
              "user.write": "Manage users",
              "group.read": "Read user group (membership, assignment) information",
              "group.write": "Manage user group (membership, assignment) information",
              "webhook.read": "Read webhook subscription configuration",
              "webhook.write": "Modify webhook subscription configuration"
            }
          }
        }
      }
    }
  }
}
